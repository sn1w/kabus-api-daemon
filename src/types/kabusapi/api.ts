/* tslint:disable */
/* eslint-disable */
/**
 * kabuステーションAPI
 * # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiSoftLimitResponse
 */
export interface ApiSoftLimitResponse {
    /**
     * 現物のワンショット上限<br>※単位は万円
     * @type {number}
     * @memberof ApiSoftLimitResponse
     */
    'Stock'?: number;
    /**
     * 信用のワンショット上限<br>※単位は万円
     * @type {number}
     * @memberof ApiSoftLimitResponse
     */
    'Margin'?: number;
    /**
     * 先物のワンショット上限<br>※単位は枚
     * @type {number}
     * @memberof ApiSoftLimitResponse
     */
    'Future'?: number;
    /**
     * 先物ミニのワンショット上限<br>※単位は枚
     * @type {number}
     * @memberof ApiSoftLimitResponse
     */
    'FutureMini'?: number;
    /**
     * オプションのワンショット上限<br>※単位は枚
     * @type {number}
     * @memberof ApiSoftLimitResponse
     */
    'Option'?: number;
    /**
     * kabuステーションのバージョン
     * @type {string}
     * @memberof ApiSoftLimitResponse
     */
    'KabuSVersion'?: string;
}
/**
 * 下記にあるBIDとASKとは、トレーダー目線から見た場合の値であるため、BidPrice=Sell1のPrice、AskPrice=Buy1のPriceという数値となります。
 * @export
 * @interface BoardSuccess
 */
export interface BoardSuccess {
    /**
     * 銘柄コード
     * @type {string}
     * @memberof BoardSuccess
     */
    'Symbol'?: string;
    /**
     * 銘柄名
     * @type {string}
     * @memberof BoardSuccess
     */
    'SymbolName'?: string;
    /**
     * 市場コード<br>※株式・先物・オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>東証</td>       </tr>       <tr>           <td>3</td>           <td>名証</td>       </tr>       <tr>           <td>5</td>           <td>福証</td>       </tr>       <tr>           <td>6</td>           <td>札証</td>       </tr>       <tr>           <td>2</td>           <td>日通し</td>       </tr>       <tr>           <td>23</td>           <td>日中</td>       </tr>       <tr>           <td>24</td>           <td>夜間</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof BoardSuccess
     */
    'Exchange'?: number;
    /**
     * 市場名称<br>※株式・先物・オプション銘柄の場合のみ
     * @type {string}
     * @memberof BoardSuccess
     */
    'ExchangeName'?: string;
    /**
     * 現値
     * @type {number}
     * @memberof BoardSuccess
     */
    'CurrentPrice'?: number;
    /**
     * 現値時刻
     * @type {string}
     * @memberof BoardSuccess
     */
    'CurrentPriceTime'?: string;
    /**
     * 現値前値比較 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0000</td>           <td>事象なし</td>       </tr>       <tr>           <td>0056</td>           <td>変わらず</td>       </tr>       <tr>           <td>0057</td>           <td>UP</td>       </tr>       <tr>           <td>0058</td>           <td>DOWN</td>       </tr>       <tr>           <td>0059</td>           <td>中断板寄り後の初値</td>       </tr>       <tr>           <td>0060</td>           <td>ザラバ引け</td>       </tr>       <tr>           <td>0061</td>           <td>板寄り引け</td>       </tr>       <tr>           <td>0062</td>           <td>中断引け</td>       </tr>       <tr>           <td>0063</td>           <td>ダウン引け</td>       </tr>       <tr>           <td>0064</td>           <td>逆転終値</td>       </tr>       <tr>           <td>0066</td>           <td>特別気配引け</td>       </tr>       <tr>           <td>0067</td>           <td>一時留保引け</td>       </tr>       <tr>           <td>0068</td>           <td>売買停止引け</td>       </tr>       <tr>           <td>0069</td>           <td>サーキットブレーカ引け</td>       </tr>       <tr>           <td>0431</td>           <td>ダイナミックサーキットブレーカ引け</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof BoardSuccess
     */
    'CurrentPriceChangeStatus'?: string;
    /**
     * 現値ステータス <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>現値</td>       </tr>       <tr>           <td>2</td>           <td>不連続歩み</td>       </tr>       <tr>           <td>3</td>           <td>板寄せ</td>       </tr>       <tr>           <td>4</td>           <td>システム障害</td>       </tr>       <tr>           <td>5</td>           <td>中断</td>       </tr>       <tr>           <td>6</td>           <td>売買停止</td>       </tr>       <tr>           <td>7</td>           <td>売買停止・システム停止解除</td>       </tr>       <tr>           <td>8</td>           <td>終値</td>       </tr>       <tr>           <td>9</td>           <td>システム停止</td>       </tr>       <tr>           <td>10</td>           <td>概算値</td>       </tr>       <tr>           <td>11</td>           <td>参考値</td>       </tr>       <tr>           <td>12</td>           <td>サーキットブレイク実施中</td>       </tr>       <tr>           <td>13</td>           <td>システム障害解除</td>       </tr>       <tr>           <td>14</td>           <td>サーキットブレイク解除</td>       </tr>       <tr>           <td>15</td>           <td>中断解除</td>       </tr>       <tr>           <td>16</td>           <td>一時留保中</td>       </tr>       <tr>           <td>17</td>           <td>一時留保解除</td>       </tr>       <tr>           <td>18</td>           <td>ファイル障害</td>       </tr>       <tr>           <td>19</td>           <td>ファイル障害解除</td>       </tr>       <tr>           <td>20</td>           <td>Spread/Strategy</td>       </tr>       <tr>           <td>21</td>           <td>ダイナミックサーキットブレイク発動</td>       </tr>       <tr>           <td>22</td>           <td>ダイナミックサーキットブレイク解除</td>       </tr>       <tr>           <td>23</td>           <td>板寄せ約定</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof BoardSuccess
     */
    'CurrentPriceStatus'?: number;
    /**
     * 計算用現値
     * @type {number}
     * @memberof BoardSuccess
     */
    'CalcPrice'?: number;
    /**
     * 前日終値
     * @type {number}
     * @memberof BoardSuccess
     */
    'PreviousClose'?: number;
    /**
     * 前日終値日付
     * @type {string}
     * @memberof BoardSuccess
     */
    'PreviousCloseTime'?: string;
    /**
     * 前日比
     * @type {number}
     * @memberof BoardSuccess
     */
    'ChangePreviousClose'?: number;
    /**
     * 騰落率
     * @type {number}
     * @memberof BoardSuccess
     */
    'ChangePreviousClosePer'?: number;
    /**
     * 始値
     * @type {number}
     * @memberof BoardSuccess
     */
    'OpeningPrice'?: number;
    /**
     * 始値時刻
     * @type {string}
     * @memberof BoardSuccess
     */
    'OpeningPriceTime'?: string;
    /**
     * 高値
     * @type {number}
     * @memberof BoardSuccess
     */
    'HighPrice'?: number;
    /**
     * 高値時刻
     * @type {string}
     * @memberof BoardSuccess
     */
    'HighPriceTime'?: string;
    /**
     * 安値
     * @type {number}
     * @memberof BoardSuccess
     */
    'LowPrice'?: number;
    /**
     * 安値時刻
     * @type {string}
     * @memberof BoardSuccess
     */
    'LowPriceTime'?: string;
    /**
     * 売買高<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'TradingVolume'?: number;
    /**
     * 売買高時刻<br>※株式・先物・オプション銘柄の場合のみ
     * @type {string}
     * @memberof BoardSuccess
     */
    'TradingVolumeTime'?: string;
    /**
     * 売買高加重平均価格（VWAP）<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'VWAP'?: number;
    /**
     * 売買代金<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'TradingValue'?: number;
    /**
     * 最良売気配数量 ※①<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'BidQty'?: number;
    /**
     * 最良売気配値段 ※①<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'BidPrice'?: number;
    /**
     * 最良売気配時刻 ※①<br>※株式銘柄の場合のみ
     * @type {string}
     * @memberof BoardSuccess
     */
    'BidTime'?: string;
    /**
     * 最良売気配フラグ ※①<br>※株式・先物・オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0000</td>           <td>事象なし</td>       </tr>       <tr>           <td>0101</td>           <td>一般気配</td>       </tr>       <tr>           <td>0102</td>           <td>特別気配</td>       </tr>       <tr>           <td>0103</td>           <td>注意気配</td>       </tr>       <tr>           <td>0107</td>           <td>寄前気配</td>       </tr>       <tr>           <td>0108</td>           <td>停止前特別気配</td>       </tr>       <tr>           <td>0109</td>           <td>引け後気配</td>       </tr>       <tr>           <td>0116</td>           <td>寄前気配約定成立ポイントなし</td>       </tr>       <tr>           <td>0117</td>           <td>寄前気配約定成立ポイントあり</td>       </tr>       <tr>           <td>0118</td>           <td>連続約定気配</td>       </tr>       <tr>           <td>0119</td>           <td>停止前の連続約定気配</td>       </tr>       <tr>           <td>0120</td>           <td>買い上がり売り下がり中</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof BoardSuccess
     */
    'BidSign'?: string;
    /**
     * 売成行数量<br>※株式銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'MarketOrderSellQty'?: number;
    /**
     * 
     * @type {BoardSuccessSell1}
     * @memberof BoardSuccess
     */
    'Sell1'?: BoardSuccessSell1;
    /**
     * 
     * @type {BoardSuccessSell2}
     * @memberof BoardSuccess
     */
    'Sell2'?: BoardSuccessSell2;
    /**
     * 
     * @type {BoardSuccessSell3}
     * @memberof BoardSuccess
     */
    'Sell3'?: BoardSuccessSell3;
    /**
     * 
     * @type {BoardSuccessSell4}
     * @memberof BoardSuccess
     */
    'Sell4'?: BoardSuccessSell4;
    /**
     * 
     * @type {BoardSuccessSell5}
     * @memberof BoardSuccess
     */
    'Sell5'?: BoardSuccessSell5;
    /**
     * 
     * @type {BoardSuccessSell6}
     * @memberof BoardSuccess
     */
    'Sell6'?: BoardSuccessSell6;
    /**
     * 
     * @type {BoardSuccessSell7}
     * @memberof BoardSuccess
     */
    'Sell7'?: BoardSuccessSell7;
    /**
     * 
     * @type {BoardSuccessSell8}
     * @memberof BoardSuccess
     */
    'Sell8'?: BoardSuccessSell8;
    /**
     * 
     * @type {BoardSuccessSell9}
     * @memberof BoardSuccess
     */
    'Sell9'?: BoardSuccessSell9;
    /**
     * 
     * @type {BoardSuccessSell10}
     * @memberof BoardSuccess
     */
    'Sell10'?: BoardSuccessSell10;
    /**
     * 最良買気配数量 ※①<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'AskQty'?: number;
    /**
     * 最良買気配値段 ※①<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'AskPrice'?: number;
    /**
     * 最良買気配時刻 ※①<br>※株式銘柄の場合のみ
     * @type {string}
     * @memberof BoardSuccess
     */
    'AskTime'?: string;
    /**
     * 最良買気配フラグ ※①<br>※株式・先物・オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0000</td>           <td>事象なし</td>       </tr>       <tr>           <td>0101</td>           <td>一般気配</td>       </tr>       <tr>           <td>0102</td>           <td>特別気配</td>       </tr>       <tr>           <td>0103</td>           <td>注意気配</td>       </tr>       <tr>           <td>0107</td>           <td>寄前気配</td>       </tr>       <tr>           <td>0108</td>           <td>停止前特別気配</td>       </tr>       <tr>           <td>0109</td>           <td>引け後気配</td>       </tr>       <tr>           <td>0116</td>           <td>寄前気配約定成立ポイントなし</td>       </tr>       <tr>           <td>0117</td>           <td>寄前気配約定成立ポイントあり</td>       </tr>       <tr>           <td>0118</td>           <td>連続約定気配</td>       </tr>       <tr>           <td>0119</td>           <td>停止前の連続約定気配</td>       </tr>       <tr>           <td>0120</td>           <td>買い上がり売り下がり中</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof BoardSuccess
     */
    'AskSign'?: string;
    /**
     * 買成行数量<br>※株式銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'MarketOrderBuyQty'?: number;
    /**
     * 
     * @type {BoardSuccessBuy1}
     * @memberof BoardSuccess
     */
    'Buy1'?: BoardSuccessBuy1;
    /**
     * 
     * @type {BoardSuccessBuy2}
     * @memberof BoardSuccess
     */
    'Buy2'?: BoardSuccessBuy2;
    /**
     * 
     * @type {BoardSuccessBuy3}
     * @memberof BoardSuccess
     */
    'Buy3'?: BoardSuccessBuy3;
    /**
     * 
     * @type {BoardSuccessBuy4}
     * @memberof BoardSuccess
     */
    'Buy4'?: BoardSuccessBuy4;
    /**
     * 
     * @type {BoardSuccessBuy5}
     * @memberof BoardSuccess
     */
    'Buy5'?: BoardSuccessBuy5;
    /**
     * 
     * @type {BoardSuccessBuy6}
     * @memberof BoardSuccess
     */
    'Buy6'?: BoardSuccessBuy6;
    /**
     * 
     * @type {BoardSuccessBuy7}
     * @memberof BoardSuccess
     */
    'Buy7'?: BoardSuccessBuy7;
    /**
     * 
     * @type {BoardSuccessBuy8}
     * @memberof BoardSuccess
     */
    'Buy8'?: BoardSuccessBuy8;
    /**
     * 
     * @type {BoardSuccessBuy9}
     * @memberof BoardSuccess
     */
    'Buy9'?: BoardSuccessBuy9;
    /**
     * 
     * @type {BoardSuccessBuy10}
     * @memberof BoardSuccess
     */
    'Buy10'?: BoardSuccessBuy10;
    /**
     * OVER気配数量<br>※株式銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'OverSellQty'?: number;
    /**
     * UNDER気配数量<br>※株式銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'UnderBuyQty'?: number;
    /**
     * 時価総額<br>※株式銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'TotalMarketValue'?: number;
    /**
     * 清算値<br>※先物銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'ClearingPrice'?: number;
    /**
     * インプライド・ボラティリティ<br>※オプション銘柄かつ日通しの場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'IV'?: number;
    /**
     * ガンマ<br>※オプション銘柄かつ日通しの場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'Gamma'?: number;
    /**
     * セータ<br>※オプション銘柄かつ日通しの場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'Theta'?: number;
    /**
     * ベガ<br>※オプション銘柄かつ日通しの場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'Vega'?: number;
    /**
     * デルタ<br>※オプション銘柄かつ日通しの場合のみ
     * @type {number}
     * @memberof BoardSuccess
     */
    'Delta'?: number;
    /**
     * 銘柄種別 <table>   <thead>     <tr>       <th>定義値</th>       <th>説明</th>     </tr>   </thead>   <tbody>     <tr>       <td>0</td>       <td>指数</td>     </tr>     <tr>       <td>1</td>       <td>現物</td>     </tr>     <tr>       <td>101</td>       <td>日経225先物</td>     </tr>     <tr>       <td>103</td>       <td>日経225OP</td>     </tr>     <tr>       <td>107</td>       <td>TOPIX先物</td>     </tr>     <tr>       <td>121</td>       <td>JPX400先物</td>     </tr>     <tr>       <td>144</td>       <td>NYダウ</td>     </tr>     <tr>       <td>145</td>       <td>日経平均VI</td>     </tr>     <tr>       <td>154</td>       <td>東証マザーズ指数先物</td>     </tr>     <tr>       <td>155</td>       <td>TOPIX_REIT</td>     </tr>     <tr>       <td>171</td>       <td>TOPIX CORE30</td>     </tr>     <tr>       <td>901</td>       <td>日経平均225ミニ先物</td>     </tr>     <tr>       <td>907</td>       <td>TOPIXミニ先物</td>     </tr>   </tbody> </table>
     * @type {number}
     * @memberof BoardSuccess
     */
    'SecurityType'?: number;
}
/**
 * 買気配数量1本目
 * @export
 * @interface BoardSuccessBuy1
 */
export interface BoardSuccessBuy1 {
    /**
     * 時刻<br>※株式銘柄の場合のみ
     * @type {string}
     * @memberof BoardSuccessBuy1
     */
    'Time'?: string;
    /**
     * 気配フラグ<br>※株式・先物・オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0000</td>           <td>事象なし</td>       </tr>       <tr>           <td>0101</td>           <td>一般気配</td>       </tr>       <tr>           <td>0102</td>           <td>特別気配</td>       </tr>       <tr>           <td>0103</td>           <td>注意気配</td>       </tr>       <tr>           <td>0107</td>           <td>寄前気配</td>       </tr>       <tr>           <td>0108</td>           <td>停止前特別気配</td>       </tr>       <tr>           <td>0109</td>           <td>引け後気配</td>       </tr>       <tr>           <td>0116</td>           <td>寄前気配約定成立ポイントなし</td>       </tr>       <tr>           <td>0117</td>           <td>寄前気配約定成立ポイントあり</td>       </tr>       <tr>           <td>0118</td>           <td>連続約定気配</td>       </tr>       <tr>           <td>0119</td>           <td>停止前の連続約定気配</td>       </tr>       <tr>           <td>0120</td>           <td>買い上がり売り下がり中</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof BoardSuccessBuy1
     */
    'Sign'?: string;
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy1
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy1
     */
    'Qty'?: number;
}
/**
 * 買気配数量10本目
 * @export
 * @interface BoardSuccessBuy10
 */
export interface BoardSuccessBuy10 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy10
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy10
     */
    'Qty'?: number;
}
/**
 * 買気配数量2本目
 * @export
 * @interface BoardSuccessBuy2
 */
export interface BoardSuccessBuy2 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy2
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy2
     */
    'Qty'?: number;
}
/**
 * 買気配数量3本目
 * @export
 * @interface BoardSuccessBuy3
 */
export interface BoardSuccessBuy3 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy3
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy3
     */
    'Qty'?: number;
}
/**
 * 買気配数量4本目
 * @export
 * @interface BoardSuccessBuy4
 */
export interface BoardSuccessBuy4 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy4
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy4
     */
    'Qty'?: number;
}
/**
 * 買気配数量5本目
 * @export
 * @interface BoardSuccessBuy5
 */
export interface BoardSuccessBuy5 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy5
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy5
     */
    'Qty'?: number;
}
/**
 * 買気配数量6本目
 * @export
 * @interface BoardSuccessBuy6
 */
export interface BoardSuccessBuy6 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy6
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy6
     */
    'Qty'?: number;
}
/**
 * 買気配数量7本目
 * @export
 * @interface BoardSuccessBuy7
 */
export interface BoardSuccessBuy7 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy7
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy7
     */
    'Qty'?: number;
}
/**
 * 買気配数量8本目
 * @export
 * @interface BoardSuccessBuy8
 */
export interface BoardSuccessBuy8 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy8
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy8
     */
    'Qty'?: number;
}
/**
 * 買気配数量9本目
 * @export
 * @interface BoardSuccessBuy9
 */
export interface BoardSuccessBuy9 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy9
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessBuy9
     */
    'Qty'?: number;
}
/**
 * 売気配数量1本目
 * @export
 * @interface BoardSuccessSell1
 */
export interface BoardSuccessSell1 {
    /**
     * 時刻<br>※株式銘柄の場合のみ
     * @type {string}
     * @memberof BoardSuccessSell1
     */
    'Time'?: string;
    /**
     * 気配フラグ<br>※株式・先物・オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0000</td>           <td>事象なし</td>       </tr>       <tr>           <td>0101</td>           <td>一般気配</td>       </tr>       <tr>           <td>0102</td>           <td>特別気配</td>       </tr>       <tr>           <td>0103</td>           <td>注意気配</td>       </tr>       <tr>           <td>0107</td>           <td>寄前気配</td>       </tr>       <tr>           <td>0108</td>           <td>停止前特別気配</td>       </tr>       <tr>           <td>0109</td>           <td>引け後気配</td>       </tr>       <tr>           <td>0116</td>           <td>寄前気配約定成立ポイントなし</td>       </tr>       <tr>           <td>0117</td>           <td>寄前気配約定成立ポイントあり</td>       </tr>       <tr>           <td>0118</td>           <td>連続約定気配</td>       </tr>       <tr>           <td>0119</td>           <td>停止前の連続約定気配</td>       </tr>       <tr>           <td>0120</td>           <td>買い上がり売り下がり中</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof BoardSuccessSell1
     */
    'Sign'?: string;
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell1
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell1
     */
    'Qty'?: number;
}
/**
 * 売気配数量10本目
 * @export
 * @interface BoardSuccessSell10
 */
export interface BoardSuccessSell10 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell10
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell10
     */
    'Qty'?: number;
}
/**
 * 売気配数量2本目
 * @export
 * @interface BoardSuccessSell2
 */
export interface BoardSuccessSell2 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell2
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell2
     */
    'Qty'?: number;
}
/**
 * 売気配数量3本目
 * @export
 * @interface BoardSuccessSell3
 */
export interface BoardSuccessSell3 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell3
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell3
     */
    'Qty'?: number;
}
/**
 * 売気配数量4本目
 * @export
 * @interface BoardSuccessSell4
 */
export interface BoardSuccessSell4 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell4
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell4
     */
    'Qty'?: number;
}
/**
 * 売気配数量5本目
 * @export
 * @interface BoardSuccessSell5
 */
export interface BoardSuccessSell5 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell5
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell5
     */
    'Qty'?: number;
}
/**
 * 売気配数量6本目
 * @export
 * @interface BoardSuccessSell6
 */
export interface BoardSuccessSell6 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell6
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell6
     */
    'Qty'?: number;
}
/**
 * 売気配数量7本目
 * @export
 * @interface BoardSuccessSell7
 */
export interface BoardSuccessSell7 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell7
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell7
     */
    'Qty'?: number;
}
/**
 * 売気配数量8本目
 * @export
 * @interface BoardSuccessSell8
 */
export interface BoardSuccessSell8 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell8
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell8
     */
    'Qty'?: number;
}
/**
 * 売気配数量9本目
 * @export
 * @interface BoardSuccessSell9
 */
export interface BoardSuccessSell9 {
    /**
     * 値段<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell9
     */
    'Price'?: number;
    /**
     * 数量<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof BoardSuccessSell9
     */
    'Qty'?: number;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * エラーコード
     * @type {number}
     * @memberof ErrorResponse
     */
    'Code'?: number;
    /**
     * [エラーメッセージ](../ptal/error.html#message)
     * @type {string}
     * @memberof ErrorResponse
     */
    'Message'?: string;
}
/**
 * 
 * @export
 * @interface ExchangeResponse
 */
export interface ExchangeResponse {
    /**
     * 通貨
     * @type {string}
     * @memberof ExchangeResponse
     */
    'Symbol'?: string;
    /**
     * BID
     * @type {number}
     * @memberof ExchangeResponse
     */
    'BidPrice'?: number;
    /**
     * SP
     * @type {number}
     * @memberof ExchangeResponse
     */
    'Spread'?: number;
    /**
     * ASK
     * @type {number}
     * @memberof ExchangeResponse
     */
    'AskPrice'?: number;
    /**
     * 前日比
     * @type {number}
     * @memberof ExchangeResponse
     */
    'Change'?: number;
    /**
     * 時刻 <br>※HH:mm:ss形式
     * @type {string}
     * @memberof ExchangeResponse
     */
    'Time'?: string;
}
/**
 * 
 * @export
 * @interface MarginPremiumResponse
 */
export interface MarginPremiumResponse {
    /**
     * 銘柄コード
     * @type {string}
     * @memberof MarginPremiumResponse
     */
    'Symbol'?: string;
    /**
     * 
     * @type {MarginPremiumResponseGeneralMargin}
     * @memberof MarginPremiumResponse
     */
    'GeneralMargin'?: MarginPremiumResponseGeneralMargin;
    /**
     * 
     * @type {MarginPremiumResponseDayTrade}
     * @memberof MarginPremiumResponse
     */
    'DayTrade'?: MarginPremiumResponseDayTrade;
}
/**
 * 一般信用（デイトレ）
 * @export
 * @interface MarginPremiumResponseDayTrade
 */
export interface MarginPremiumResponseDayTrade {
    /**
     * プレミアム料入力区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>null</td>           <td>一般信用（デイトレ）非対応銘柄</td>       </tr>       <tr>           <td>0</td>           <td>プレミアム料がない銘柄</td>       </tr>       <tr>           <td>1</td>           <td>プレミアム料が固定の銘柄</td>       </tr>       <tr>           <td>2</td>           <td>プレミアム料が入札で決定する銘柄</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof MarginPremiumResponseDayTrade
     */
    'MarginPremiumType'?: number;
    /**
     * 確定プレミアム料<br> ※入札銘柄の場合、入札受付中は随時更新します。受付時間外は、確定したプレミアム料を返します。<br> ※非入札銘柄の場合、常に固定値を返します。<br> ※信用取引不可の場合、nullを返します。<br> ※19:30~翌営業日のプレミアム料になります。
     * @type {number}
     * @memberof MarginPremiumResponseDayTrade
     */
    'MarginPremium'?: number;
    /**
     * 上限プレミアム料<br> ※プレミアム料がない場合は、nullを返します。
     * @type {number}
     * @memberof MarginPremiumResponseDayTrade
     */
    'UpperMarginPremium'?: number;
    /**
     * 下限プレミアム料<br> ※プレミアム料がない場合は、nullを返します。
     * @type {number}
     * @memberof MarginPremiumResponseDayTrade
     */
    'LowerMarginPremium'?: number;
    /**
     * プレミアム料刻値<br> ※入札可能銘柄以外は、nullを返します。
     * @type {number}
     * @memberof MarginPremiumResponseDayTrade
     */
    'TickMarginPremium'?: number;
}
/**
 * 一般信用（長期）
 * @export
 * @interface MarginPremiumResponseGeneralMargin
 */
export interface MarginPremiumResponseGeneralMargin {
    /**
     * プレミアム料入力区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>null</td>           <td>一般信用（長期）非対応銘柄</td>       </tr>       <tr>           <td>0</td>           <td>プレミアム料がない銘柄</td>       </tr>       <tr>           <td>1</td>           <td>プレミアム料が固定の銘柄</td>       </tr>       <tr>           <td>2</td>           <td>プレミアム料が入札で決定する銘柄</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof MarginPremiumResponseGeneralMargin
     */
    'MarginPremiumType'?: number;
    /**
     * 確定プレミアム料<br> ※入札銘柄の場合、入札受付中は随時更新します。受付時間外は、確定したプレミアム料を返します。<br> ※非入札銘柄の場合、常に固定値を返します。<br> ※信用取引不可の場合、nullを返します。<br> ※19:30~翌営業日のプレミアム料になります。
     * @type {number}
     * @memberof MarginPremiumResponseGeneralMargin
     */
    'MarginPremium'?: number;
    /**
     * 上限プレミアム料<br> ※プレミアム料がない場合は、nullを返します。
     * @type {number}
     * @memberof MarginPremiumResponseGeneralMargin
     */
    'UpperMarginPremium'?: number;
    /**
     * 下限プレミアム料<br> ※プレミアム料がない場合は、nullを返します。
     * @type {number}
     * @memberof MarginPremiumResponseGeneralMargin
     */
    'LowerMarginPremium'?: number;
    /**
     * プレミアム料刻値<br> ※入札可能銘柄以外は、nullを返します。
     * @type {number}
     * @memberof MarginPremiumResponseGeneralMargin
     */
    'TickMarginPremium'?: number;
}
/**
 * 
 * @export
 * @interface OrderSuccess
 */
export interface OrderSuccess {
    /**
     * 結果コード<br>0が成功。それ以外はエラーコード。
     * @type {number}
     * @memberof OrderSuccess
     */
    'Result'?: number;
    /**
     * 受付注文番号
     * @type {string}
     * @memberof OrderSuccess
     */
    'OrderId'?: string;
}
/**
 * 
 * @export
 * @interface OrdersSuccess
 */
export interface OrdersSuccess {
    /**
     * 注文番号
     * @type {string}
     * @memberof OrdersSuccess
     */
    'ID'?: string;
    /**
     * 状態 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>待機（発注待機）</td>       </tr>       <tr>           <td>2</td>           <td>処理中（発注送信中）</td>       </tr>       <tr>           <td>3</td>           <td>処理済（発注済・訂正済）</td>       </tr>       <tr>           <td>4</td>           <td>訂正取消送信中</td>       </tr>       <tr>           <td>5</td>           <td>終了（発注エラー・取消済・全約定・失効・期限切れ）</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof OrdersSuccess
     */
    'State'?: number;
    /**
     * 注文状態 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>待機（発注待機）</td>       </tr>       <tr>           <td>2</td>           <td>処理中（発注送信中）</td>       </tr>       <tr>           <td>3</td>           <td>処理済（発注済・訂正済）</td>       </tr>       <tr>           <td>4</td>           <td>訂正取消送信中</td>       </tr>       <tr>           <td>5</td>           <td>終了（発注エラー・取消済・全約定・失効・期限切れ）</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof OrdersSuccess
     */
    'OrderState'?: number;
    /**
     * 執行条件 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>ザラバ</td>       </tr>       <tr>           <td>2</td>           <td>寄り</td>       </tr>       <tr>           <td>3</td>           <td>引け</td>       </tr>       <tr>           <td>4</td>           <td>不成</td>       </tr>       <tr>           <td>5</td>           <td>対当指値</td>       </tr>       <tr>           <td>6</td>           <td>IOC</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof OrdersSuccess
     */
    'OrdType'?: number;
    /**
     * 受注日時
     * @type {string}
     * @memberof OrdersSuccess
     */
    'RecvTime'?: string;
    /**
     * 銘柄コード
     * @type {string}
     * @memberof OrdersSuccess
     */
    'Symbol'?: string;
    /**
     * 銘柄名
     * @type {string}
     * @memberof OrdersSuccess
     */
    'SymbolName'?: string;
    /**
     * 市場コード <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>東証</td>       </tr>       <tr>           <td>3</td>           <td>名証</td>       </tr>       <tr>           <td>5</td>           <td>福証</td>       </tr>       <tr>           <td>6</td>           <td>札証</td>       </tr>       <tr>           <td>9</td>           <td>SOR</td>       </tr>       <tr>           <td>2</td>           <td>日通し</td>       </tr>       <tr>           <td>23</td>           <td>日中</td>       </tr>       <tr>           <td>24</td>           <td>夜間</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof OrdersSuccess
     */
    'Exchange'?: number;
    /**
     * 市場名
     * @type {string}
     * @memberof OrdersSuccess
     */
    'ExchangeName'?: string;
    /**
     * 有効期間条件<br>※先物・オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>FAS</td>       </tr>       <tr>           <td>2</td>           <td>FAK</td>       </tr>       <tr>           <td>3</td>           <td>FOK</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof OrdersSuccess
     */
    'TimeInForce'?: number;
    /**
     * 値段
     * @type {number}
     * @memberof OrdersSuccess
     */
    'Price'?: number;
    /**
     * 発注数量<br> ※注文期限切れと失効の場合、OrderQtyはゼロになりません。<br> ※期限切れと失効の確認方法としては、DetailsのRecType（3: 期限切れ、7: 失効）にてご確認ください。
     * @type {number}
     * @memberof OrdersSuccess
     */
    'OrderQty'?: number;
    /**
     * 約定数量
     * @type {number}
     * @memberof OrdersSuccess
     */
    'CumQty'?: number;
    /**
     * 売買区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>売</td>       </tr>       <tr>           <td>2</td>           <td>買</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof OrdersSuccess
     */
    'Side'?: string;
    /**
     * 取引区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>2</td>           <td>新規</td>       </tr>       <tr>           <td>3</td>           <td>返済</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof OrdersSuccess
     */
    'CashMargin'?: number;
    /**
     * 口座種別 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>2</td>           <td>一般</td>       </tr>       <tr>           <td>4</td>           <td>特定</td>       </tr>       <tr>           <td>12</td>           <td>法人</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof OrdersSuccess
     */
    'AccountType'?: number;
    /**
     * 受渡区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>自動振替</td>       </tr>       <tr>           <td>2</td>           <td>お預り金</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof OrdersSuccess
     */
    'DelivType'?: number;
    /**
     * 注文有効期限<br>yyyyMMdd形式
     * @type {number}
     * @memberof OrdersSuccess
     */
    'ExpireDay'?: number;
    /**
     * 信用取引区分<br> ※信用を注文した際に表示されます。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>制度信用</td>       </tr>       <tr>           <td>2</td>           <td>一般信用（長期）</td>       </tr>       <tr>           <td>3</td>           <td>一般信用（デイトレ）</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof OrdersSuccess
     */
    'MarginTradeType'?: number;
    /**
     * プレミアム料<br> ※（注文中数量＋約定済数量）×１株あたりプレミアム料として計算されます。<br> ※信用を注文した際に表示されます。<br> ※制度信用売/買、一般（長期）買、一般（デイトレ）買の場合は、Noneと返されます。<br> 一般（長期）売、一般（デイトレ）売の場合は、プレミアム料=0の場合、0（ゼロ）と返されます。
     * @type {number}
     * @memberof OrdersSuccess
     */
    'MarginPremium'?: number;
    /**
     * 注文詳細
     * @type {Array<OrdersSuccessDetails>}
     * @memberof OrdersSuccess
     */
    'Details'?: Array<OrdersSuccessDetails>;
}
/**
 * 
 * @export
 * @interface OrdersSuccessDetails
 */
export interface OrdersSuccessDetails {
    /**
     * ※注文明細レコードの生成順序です。<br>※通番であるとは限りませんが、大小による順序は保たれています。
     * @type {number}
     * @memberof OrdersSuccessDetails
     */
    'SeqNum'?: number;
    /**
     * 注文詳細番号
     * @type {string}
     * @memberof OrdersSuccessDetails
     */
    'ID'?: string;
    /**
     * 明細種別 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>受付</td>       </tr>       <tr>           <td>2</td>           <td>繰越</td>       </tr>       <tr>           <td>3</td>           <td>期限切れ</td>       </tr>       <tr>           <td>4</td>           <td>発注</td>       </tr>       <tr>           <td>5</td>           <td>訂正</td>       </tr>       <tr>           <td>6</td>           <td>取消</td>       </tr>       <tr>           <td>7</td>           <td>失効</td>       </tr>       <tr>           <td>8</td>           <td>約定</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof OrdersSuccessDetails
     */
    'RecType'?: number;
    /**
     * 取引所番号
     * @type {string}
     * @memberof OrdersSuccessDetails
     */
    'ExchangeID'?: string;
    /**
     * 状態 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>待機（発注待機）</td>       </tr>       <tr>           <td>2</td>           <td>処理中（発注送信中・訂正送信中・取消送信中）</td>       </tr>       <tr>           <td>3</td>           <td>処理済（発注済・訂正済・取消済・全約定・期限切れ）</td>       </tr>       <tr>           <td>4</td>           <td>エラー</td>       </tr>       <tr>           <td>5</td>           <td>削除済み</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof OrdersSuccessDetails
     */
    'State'?: number;
    /**
     * 処理時刻
     * @type {string}
     * @memberof OrdersSuccessDetails
     */
    'TransactTime'?: string;
    /**
     * 執行条件 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>ザラバ</td>       </tr>       <tr>           <td>2</td>           <td>寄り</td>       </tr>       <tr>           <td>3</td>           <td>引け</td>       </tr>       <tr>           <td>4</td>           <td>不成</td>       </tr>       <tr>           <td>5</td>           <td>対当指値</td>       </tr>       <tr>           <td>6</td>           <td>IOC</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof OrdersSuccessDetails
     */
    'OrdType'?: number;
    /**
     * 値段
     * @type {number}
     * @memberof OrdersSuccessDetails
     */
    'Price'?: number;
    /**
     * 数量
     * @type {number}
     * @memberof OrdersSuccessDetails
     */
    'Qty'?: number;
    /**
     * 約定番号
     * @type {string}
     * @memberof OrdersSuccessDetails
     */
    'ExecutionID'?: string;
    /**
     * 約定日時
     * @type {string}
     * @memberof OrdersSuccessDetails
     */
    'ExecutionDay'?: string;
    /**
     * 受渡日
     * @type {number}
     * @memberof OrdersSuccessDetails
     */
    'DelivDay'?: number;
    /**
     * 手数料<br>※注文詳細の明細種別が約定（RecType=8)の場合に設定。
     * @type {number}
     * @memberof OrdersSuccessDetails
     */
    'Commission'?: number;
    /**
     * 手数料消費税<br>※明細種別は約定（RecType=8）の場合にのみ表示されます。
     * @type {number}
     * @memberof OrdersSuccessDetails
     */
    'CommissionTax'?: number;
}
/**
 * 
 * @export
 * @interface Positions
 */
export interface Positions {
    /**
     * 返済建玉ID
     * @type {string}
     * @memberof Positions
     */
    'HoldID'?: string;
    /**
     * 返済建玉数量
     * @type {number}
     * @memberof Positions
     */
    'Qty'?: number;
}
/**
 * 
 * @export
 * @interface PositionsDeriv
 */
export interface PositionsDeriv {
    /**
     * 返済建玉ID
     * @type {string}
     * @memberof PositionsDeriv
     */
    'HoldID'?: string;
    /**
     * 返済建玉数量
     * @type {number}
     * @memberof PositionsDeriv
     */
    'Qty'?: number;
}
/**
 * 
 * @export
 * @interface PositionsSuccess
 */
export interface PositionsSuccess {
    /**
     * 約定番号<br>※現物取引では、nullが返ります。
     * @type {string}
     * @memberof PositionsSuccess
     */
    'ExecutionID'?: string;
    /**
     * 口座種別 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>2</td>           <td>一般</td>       </tr>       <tr>           <td>4</td>           <td>特定</td>       </tr>       <tr>           <td>12</td>           <td>法人</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof PositionsSuccess
     */
    'AccountType'?: number;
    /**
     * 銘柄コード
     * @type {string}
     * @memberof PositionsSuccess
     */
    'Symbol'?: string;
    /**
     * 銘柄名
     * @type {string}
     * @memberof PositionsSuccess
     */
    'SymbolName'?: string;
    /**
     * 市場コード <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>東証</td>       </tr>       <tr>           <td>3</td>           <td>名証</td>       </tr>       <tr>           <td>5</td>           <td>福証</td>       </tr>       <tr>           <td>6</td>           <td>札証</td>       </tr>       <tr>           <td>2</td>           <td>日通し</td>       </tr>       <tr>           <td>23</td>           <td>日中</td>       </tr>       <tr>           <td>24</td>           <td>夜間</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof PositionsSuccess
     */
    'Exchange'?: number;
    /**
     * 市場名
     * @type {string}
     * @memberof PositionsSuccess
     */
    'ExchangeName'?: string;
    /**
     * 銘柄種別<br>※先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof PositionsSuccess
     */
    'SecurityType'?: number;
    /**
     * 約定日（建玉日）<br>※信用・先物・オプションの場合のみ<br>※現物取引では、nullが返ります。
     * @type {number}
     * @memberof PositionsSuccess
     */
    'ExecutionDay'?: number;
    /**
     * 値段
     * @type {number}
     * @memberof PositionsSuccess
     */
    'Price'?: number;
    /**
     * 残数量（保有数量）
     * @type {number}
     * @memberof PositionsSuccess
     */
    'LeavesQty'?: number;
    /**
     * 拘束数量（返済のために拘束されている数量）
     * @type {number}
     * @memberof PositionsSuccess
     */
    'HoldQty'?: number;
    /**
     * 売買区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>売</td>       </tr>       <tr>           <td>2</td>           <td>買</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof PositionsSuccess
     */
    'Side'?: string;
    /**
     * 諸経費<br>※信用・先物・オプションの場合のみ
     * @type {number}
     * @memberof PositionsSuccess
     */
    'Expenses'?: number;
    /**
     * 手数料<br>※信用・先物・オプションの場合のみ
     * @type {number}
     * @memberof PositionsSuccess
     */
    'Commission'?: number;
    /**
     * 手数料消費税<br>※信用・先物・オプションの場合のみ
     * @type {number}
     * @memberof PositionsSuccess
     */
    'CommissionTax'?: number;
    /**
     * 返済期日<br>※信用・先物・オプションの場合のみ
     * @type {number}
     * @memberof PositionsSuccess
     */
    'ExpireDay'?: number;
    /**
     * 信用取引区分<br>※信用の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>制度信用</td>       </tr>       <tr>           <td>2</td>           <td>一般信用（長期）</td>       </tr>       <tr>           <td>3</td>           <td>一般信用（デイトレ）</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof PositionsSuccess
     */
    'MarginTradeType'?: number;
    /**
     * 現在値<br>追加情報出力フラグ：falseの場合、null
     * @type {number}
     * @memberof PositionsSuccess
     */
    'CurrentPrice'?: number;
    /**
     * 評価金額<br>追加情報出力フラグ：falseの場合、null
     * @type {number}
     * @memberof PositionsSuccess
     */
    'Valuation'?: number;
    /**
     * 評価損益額<br>追加情報出力フラグ：falseの場合、null
     * @type {number}
     * @memberof PositionsSuccess
     */
    'ProfitLoss'?: number;
    /**
     * 評価損益率<br>追加情報出力フラグ：falseの場合、null
     * @type {number}
     * @memberof PositionsSuccess
     */
    'ProfitLossRate'?: number;
}
/**
 * 
 * @export
 * @interface PrimaryExchangeResponse
 */
export interface PrimaryExchangeResponse {
    /**
     * 銘柄コード<br>※対象商品は、株式のみ
     * @type {string}
     * @memberof PrimaryExchangeResponse
     */
    'Symbol'?: string;
    /**
     * 優先市場 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>東証</td>       </tr>       <tr>           <td>3</td>           <td>名証</td>       </tr>       <tr>           <td>5</td>           <td>福証</td>       </tr>       <tr>           <td>6</td>           <td>札証</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof PrimaryExchangeResponse
     */
    'PrimaryExchange'?: number;
}
/**
 * 
 * @export
 * @interface RankingByCategoryResponse
 */
export interface RankingByCategoryResponse {
    /**
     * 種別<br> ※業種別値上がり率、業種別値下がり率の場合、市場は「null」になります
     * @type {string}
     * @memberof RankingByCategoryResponse
     */
    'Type'?: string;
    /**
     * 市場
     * @type {string}
     * @memberof RankingByCategoryResponse
     */
    'ExchangeDivision'?: string;
    /**
     * ランキング
     * @type {Array<RankingByCategoryResponseRanking>}
     * @memberof RankingByCategoryResponse
     */
    'Ranking'?: Array<RankingByCategoryResponseRanking>;
}
/**
 * 
 * @export
 * @interface RankingByCategoryResponseRanking
 */
export interface RankingByCategoryResponseRanking {
    /**
     * 順位<br>※ランキング内で同じ順位が返却される場合があります（10位が2件など）
     * @type {number}
     * @memberof RankingByCategoryResponseRanking
     */
    'No'?: number;
    /**
     * トレンド <table>   <thead>       <tr>           <th>定義値</th>           <th>内容</th>       </tr>   </thead>   <tbody>       <tr>           <td>0</td>           <td>対象データ無し</td>       </tr>       <tr>           <td>1</td>           <td>過去10営業日より20位以上上昇</td>       </tr>       <tr>           <td>2</td>           <td>過去10営業日より1～19位上昇</td>       </tr>       <tr>           <td>3</td>           <td>過去10営業日と変わらず</td>       </tr>       <tr>           <td>4</td>           <td>過去10営業日より1～19位下落</td>       </tr>       <tr>           <td>5</td>           <td>過去10営業日より20位以上下落</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof RankingByCategoryResponseRanking
     */
    'Trend'?: string;
    /**
     * 平均順位<br>※100位以下は「999」となります
     * @type {number}
     * @memberof RankingByCategoryResponseRanking
     */
    'AverageRanking'?: number;
    /**
     * 業種コード
     * @type {string}
     * @memberof RankingByCategoryResponseRanking
     */
    'Category'?: string;
    /**
     * 業種名
     * @type {string}
     * @memberof RankingByCategoryResponseRanking
     */
    'CategoryName'?: string;
    /**
     * 現在値
     * @type {number}
     * @memberof RankingByCategoryResponseRanking
     */
    'CurrentPrice'?: number;
    /**
     * 前日比
     * @type {number}
     * @memberof RankingByCategoryResponseRanking
     */
    'ChangeRatio'?: number;
    /**
     * 時刻<br>HH:mm<br>※日付は返しません
     * @type {string}
     * @memberof RankingByCategoryResponseRanking
     */
    'CurrentPriceTime'?: string;
    /**
     * 騰落率（%）
     * @type {number}
     * @memberof RankingByCategoryResponseRanking
     */
    'ChangePercentage'?: number;
}
/**
 * 
 * @export
 * @interface RankingByMarginResponse
 */
export interface RankingByMarginResponse {
    /**
     * 種別
     * @type {string}
     * @memberof RankingByMarginResponse
     */
    'Type'?: string;
    /**
     * 市場
     * @type {string}
     * @memberof RankingByMarginResponse
     */
    'ExchangeDivision'?: string;
    /**
     * ランキング
     * @type {Array<RankingByMarginResponseRanking>}
     * @memberof RankingByMarginResponse
     */
    'Ranking'?: Array<RankingByMarginResponseRanking>;
}
/**
 * 
 * @export
 * @interface RankingByMarginResponseRanking
 */
export interface RankingByMarginResponseRanking {
    /**
     * 順位<br>※ランキング内で同じ順位が返却される場合があります（10位が2件など）
     * @type {number}
     * @memberof RankingByMarginResponseRanking
     */
    'No'?: number;
    /**
     * 銘柄コード
     * @type {string}
     * @memberof RankingByMarginResponseRanking
     */
    'Symbol'?: string;
    /**
     * 銘柄名称
     * @type {string}
     * @memberof RankingByMarginResponseRanking
     */
    'SymbolName'?: string;
    /**
     * 売残（千株）
     * @type {number}
     * @memberof RankingByMarginResponseRanking
     */
    'SellRapidPaymentPercentage'?: number;
    /**
     * 売残前週比
     * @type {number}
     * @memberof RankingByMarginResponseRanking
     */
    'SellLastWeekRatio'?: number;
    /**
     * 買残（千株）
     * @type {number}
     * @memberof RankingByMarginResponseRanking
     */
    'BuyRapidPaymentPercentage'?: number;
    /**
     * 買残前週比
     * @type {number}
     * @memberof RankingByMarginResponseRanking
     */
    'BuyLastWeekRatio'?: number;
    /**
     * 倍率
     * @type {number}
     * @memberof RankingByMarginResponseRanking
     */
    'Ratio'?: number;
    /**
     * 市場名
     * @type {string}
     * @memberof RankingByMarginResponseRanking
     */
    'ExchangeName'?: string;
    /**
     * 業種名
     * @type {string}
     * @memberof RankingByMarginResponseRanking
     */
    'CategoryName'?: string;
}
/**
 * 
 * @export
 * @interface RankingByTickCountResponse
 */
export interface RankingByTickCountResponse {
    /**
     * 種別
     * @type {string}
     * @memberof RankingByTickCountResponse
     */
    'Type'?: string;
    /**
     * 市場
     * @type {string}
     * @memberof RankingByTickCountResponse
     */
    'ExchangeDivision'?: string;
    /**
     * ランキング
     * @type {Array<RankingByTickCountResponseRanking>}
     * @memberof RankingByTickCountResponse
     */
    'Ranking'?: Array<RankingByTickCountResponseRanking>;
}
/**
 * 
 * @export
 * @interface RankingByTickCountResponseRanking
 */
export interface RankingByTickCountResponseRanking {
    /**
     * 順位<br>※ランキング内で同じ順位が返却される場合があります（10位が2件など）
     * @type {number}
     * @memberof RankingByTickCountResponseRanking
     */
    'No'?: number;
    /**
     * トレンド <table>     <thead>         <tr>             <th>定義値</th>             <th>内容</th>         </tr>     </thead>     <tbody>         <tr>             <td>0</td>             <td>対象データ無し</td>         </tr>         <tr>             <td>1</td>             <td>過去10営業日より20位以上上昇</td>         </tr>         <tr>             <td>2</td>             <td>過去10営業日より1～19位上昇</td>         </tr>         <tr>             <td>3</td>             <td>過去10営業日と変わらず</td>         </tr>         <tr>             <td>4</td>             <td>過去10営業日より1～19位下落</td>         </tr>         <tr>             <td>5</td>             <td>過去10営業日より20位以上下落</td>         </tr>     </tbody> </table>
     * @type {string}
     * @memberof RankingByTickCountResponseRanking
     */
    'Trend'?: string;
    /**
     * 平均順位<br>※100位以下は「999」となります
     * @type {number}
     * @memberof RankingByTickCountResponseRanking
     */
    'AverageRanking'?: number;
    /**
     * 銘柄コード
     * @type {string}
     * @memberof RankingByTickCountResponseRanking
     */
    'Symbol'?: string;
    /**
     * 銘柄名称
     * @type {string}
     * @memberof RankingByTickCountResponseRanking
     */
    'SymbolName'?: string;
    /**
     * 現在値
     * @type {number}
     * @memberof RankingByTickCountResponseRanking
     */
    'CurrentPrice'?: number;
    /**
     * 前日比
     * @type {number}
     * @memberof RankingByTickCountResponseRanking
     */
    'ChangeRatio'?: number;
    /**
     * TICK回数
     * @type {number}
     * @memberof RankingByTickCountResponseRanking
     */
    'TickCount'?: number;
    /**
     * UP
     * @type {number}
     * @memberof RankingByTickCountResponseRanking
     */
    'UpCount'?: number;
    /**
     * DOWN
     * @type {number}
     * @memberof RankingByTickCountResponseRanking
     */
    'DownCount'?: number;
    /**
     * 騰落率（%）
     * @type {number}
     * @memberof RankingByTickCountResponseRanking
     */
    'ChangePercentage'?: number;
    /**
     * 売買高
     * @type {number}
     * @memberof RankingByTickCountResponseRanking
     */
    'TradingVolume'?: number;
    /**
     * 売買代金
     * @type {number}
     * @memberof RankingByTickCountResponseRanking
     */
    'Turnover'?: number;
    /**
     * 市場名
     * @type {string}
     * @memberof RankingByTickCountResponseRanking
     */
    'ExchangeName'?: string;
    /**
     * 業種名
     * @type {string}
     * @memberof RankingByTickCountResponseRanking
     */
    'CategoryName'?: string;
}
/**
 * 
 * @export
 * @interface RankingByTradeValueResponse
 */
export interface RankingByTradeValueResponse {
    /**
     * 種別
     * @type {string}
     * @memberof RankingByTradeValueResponse
     */
    'Type'?: string;
    /**
     * 市場
     * @type {string}
     * @memberof RankingByTradeValueResponse
     */
    'ExchangeDivision'?: string;
    /**
     * ランキング
     * @type {Array<RankingByTradeValueResponseRanking>}
     * @memberof RankingByTradeValueResponse
     */
    'Ranking'?: Array<RankingByTradeValueResponseRanking>;
}
/**
 * 
 * @export
 * @interface RankingByTradeValueResponseRanking
 */
export interface RankingByTradeValueResponseRanking {
    /**
     * 順位<br>※ランキング内で同じ順位が返却される場合があります（10位が2件など）
     * @type {number}
     * @memberof RankingByTradeValueResponseRanking
     */
    'No'?: number;
    /**
     * トレンド <table>     <thead>         <tr>             <th>定義値</th>             <th>内容</th>         </tr>     </thead>     <tbody>         <tr>             <td>0</td>             <td>対象データ無し</td>         </tr>         <tr>             <td>1</td>             <td>過去10営業日より20位以上上昇</td>         </tr>         <tr>             <td>2</td>             <td>過去10営業日より1～19位上昇</td>         </tr>         <tr>             <td>3</td>             <td>過去10営業日と変わらず</td>         </tr>         <tr>             <td>4</td>             <td>過去10営業日より1～19位下落</td>         </tr>         <tr>             <td>5</td>             <td>過去10営業日より20位以上下落</td>         </tr>     </tbody> </table>
     * @type {string}
     * @memberof RankingByTradeValueResponseRanking
     */
    'Trend'?: string;
    /**
     * 平均順位<br>※100位以下は「999」となります
     * @type {number}
     * @memberof RankingByTradeValueResponseRanking
     */
    'AverageRanking'?: number;
    /**
     * 銘柄コード
     * @type {string}
     * @memberof RankingByTradeValueResponseRanking
     */
    'Symbol'?: string;
    /**
     * 銘柄名称
     * @type {string}
     * @memberof RankingByTradeValueResponseRanking
     */
    'SymbolName'?: string;
    /**
     * 現在値
     * @type {number}
     * @memberof RankingByTradeValueResponseRanking
     */
    'CurrentPrice'?: number;
    /**
     * 前日比
     * @type {number}
     * @memberof RankingByTradeValueResponseRanking
     */
    'ChangeRatio'?: number;
    /**
     * 代金急増（％）
     * @type {number}
     * @memberof RankingByTradeValueResponseRanking
     */
    'RapidPaymentPercentage'?: number;
    /**
     * 売買代金
     * @type {number}
     * @memberof RankingByTradeValueResponseRanking
     */
    'Turnover'?: number;
    /**
     * 時刻<br>HH:mm<br>※日付は返しません
     * @type {string}
     * @memberof RankingByTradeValueResponseRanking
     */
    'CurrentPriceTime'?: string;
    /**
     * 騰落率（%）
     * @type {number}
     * @memberof RankingByTradeValueResponseRanking
     */
    'ChangePercentage'?: number;
    /**
     * 市場名
     * @type {string}
     * @memberof RankingByTradeValueResponseRanking
     */
    'ExchangeName'?: string;
    /**
     * 業種名
     * @type {string}
     * @memberof RankingByTradeValueResponseRanking
     */
    'CategoryName'?: string;
}
/**
 * 
 * @export
 * @interface RankingByTradeVolumeResponse
 */
export interface RankingByTradeVolumeResponse {
    /**
     * 種別
     * @type {string}
     * @memberof RankingByTradeVolumeResponse
     */
    'Type'?: string;
    /**
     * 市場
     * @type {string}
     * @memberof RankingByTradeVolumeResponse
     */
    'ExchangeDivision'?: string;
    /**
     * ランキング
     * @type {Array<RankingByTradeVolumeResponseRanking>}
     * @memberof RankingByTradeVolumeResponse
     */
    'Ranking'?: Array<RankingByTradeVolumeResponseRanking>;
}
/**
 * 
 * @export
 * @interface RankingByTradeVolumeResponseRanking
 */
export interface RankingByTradeVolumeResponseRanking {
    /**
     * 順位<br>※ランキング内で同じ順位が返却される場合があります（10位が2件など）
     * @type {number}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'No'?: number;
    /**
     * トレンド <table>     <thead>         <tr>             <th>定義値</th>             <th>内容</th>         </tr>     </thead>     <tbody>         <tr>             <td>0</td>             <td>対象データ無し</td>         </tr>         <tr>             <td>1</td>             <td>過去10営業日より20位以上上昇</td>         </tr>         <tr>             <td>2</td>             <td>過去10営業日より1～19位上昇</td>         </tr>         <tr>             <td>3</td>             <td>過去10営業日と変わらず</td>         </tr>         <tr>             <td>4</td>             <td>過去10営業日より1～19位下落</td>         </tr>         <tr>             <td>5</td>             <td>過去10営業日より20位以上下落</td>         </tr>     </tbody> </table>
     * @type {string}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'Trend'?: string;
    /**
     * 平均順位<br>※100位以下は「999」となります
     * @type {number}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'AverageRanking'?: number;
    /**
     * 銘柄コード
     * @type {string}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'Symbol'?: string;
    /**
     * 銘柄名称
     * @type {string}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'SymbolName'?: string;
    /**
     * 現在値
     * @type {number}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'CurrentPrice'?: number;
    /**
     * 前日比
     * @type {number}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'ChangeRatio'?: number;
    /**
     * 売買高急増（％）
     * @type {number}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'RapidTradePercentage'?: number;
    /**
     * 売買高
     * @type {number}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'TradingVolume'?: number;
    /**
     * 時刻<br>HH:mm<br>※日付は返しません
     * @type {string}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'CurrentPriceTime'?: string;
    /**
     * 騰落率（%）
     * @type {number}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'ChangePercentage'?: number;
    /**
     * 市場名
     * @type {string}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'ExchangeName'?: string;
    /**
     * 業種名
     * @type {string}
     * @memberof RankingByTradeVolumeResponseRanking
     */
    'CategoryName'?: string;
}
/**
 * 
 * @export
 * @interface RankingDefaultResponse
 */
export interface RankingDefaultResponse {
    /**
     * 種別
     * @type {string}
     * @memberof RankingDefaultResponse
     */
    'Type'?: string;
    /**
     * 市場
     * @type {string}
     * @memberof RankingDefaultResponse
     */
    'ExchangeDivision'?: string;
    /**
     * ランキング
     * @type {Array<RankingDefaultResponseRanking>}
     * @memberof RankingDefaultResponse
     */
    'Ranking'?: Array<RankingDefaultResponseRanking>;
}
/**
 * 
 * @export
 * @interface RankingDefaultResponseRanking
 */
export interface RankingDefaultResponseRanking {
    /**
     * 順位<br>※ランキング内で同じ順位が返却される場合があります（10位が2件など）
     * @type {number}
     * @memberof RankingDefaultResponseRanking
     */
    'No'?: number;
    /**
     * トレンド <table>     <thead>         <tr>             <th>定義値</th>             <th>内容</th>         </tr>     </thead>     <tbody>         <tr>             <td>0</td>             <td>対象データ無し</td>         </tr>         <tr>             <td>1</td>             <td>過去10営業日より20位以上上昇</td>         </tr>         <tr>             <td>2</td>             <td>過去10営業日より1～19位上昇</td>         </tr>         <tr>             <td>3</td>             <td>過去10営業日と変わらず</td>         </tr>         <tr>             <td>4</td>             <td>過去10営業日より1～19位下落</td>         </tr>         <tr>             <td>5</td>             <td>過去10営業日より20位以上下落</td>         </tr>     </tbody> </table>
     * @type {string}
     * @memberof RankingDefaultResponseRanking
     */
    'Trend'?: string;
    /**
     * 平均順位<br>※100位以下は「999」となります
     * @type {number}
     * @memberof RankingDefaultResponseRanking
     */
    'AverageRanking'?: number;
    /**
     * 銘柄コード
     * @type {string}
     * @memberof RankingDefaultResponseRanking
     */
    'Symbol'?: string;
    /**
     * 銘柄名称
     * @type {string}
     * @memberof RankingDefaultResponseRanking
     */
    'SymbolName'?: string;
    /**
     * 現在値
     * @type {number}
     * @memberof RankingDefaultResponseRanking
     */
    'CurrentPrice'?: number;
    /**
     * 前日比
     * @type {number}
     * @memberof RankingDefaultResponseRanking
     */
    'ChangeRatio'?: number;
    /**
     * 騰落率（%）
     * @type {number}
     * @memberof RankingDefaultResponseRanking
     */
    'ChangePercentage'?: number;
    /**
     * 時刻<br>HH:mm<br>※日付は返しません
     * @type {string}
     * @memberof RankingDefaultResponseRanking
     */
    'CurrentPriceTime'?: string;
    /**
     * 売買高
     * @type {number}
     * @memberof RankingDefaultResponseRanking
     */
    'TradingVolume'?: number;
    /**
     * 売買代金
     * @type {number}
     * @memberof RankingDefaultResponseRanking
     */
    'Turnover'?: number;
    /**
     * 市場名
     * @type {string}
     * @memberof RankingDefaultResponseRanking
     */
    'ExchangeName'?: string;
    /**
     * 業種名
     * @type {string}
     * @memberof RankingDefaultResponseRanking
     */
    'CategoryName'?: string;
}
/**
 * 
 * @export
 * @interface RegistSuccess
 */
export interface RegistSuccess {
    /**
     * 現在登録されている銘柄のリスト
     * @type {Array<RequestRegisterSymbols>}
     * @memberof RegistSuccess
     */
    'RegistList'?: Array<RequestRegisterSymbols>;
}
/**
 * 
 * @export
 * @interface RegulationsResponse
 */
export interface RegulationsResponse {
    /**
     * 銘柄コード<br> ※対象商品は、株式のみ
     * @type {string}
     * @memberof RegulationsResponse
     */
    'Symbol'?: string;
    /**
     * 規制情報
     * @type {Array<RegulationsResponseRegulationsInfo>}
     * @memberof RegulationsResponse
     */
    'RegulationsInfo'?: Array<RegulationsResponseRegulationsInfo>;
}
/**
 * 
 * @export
 * @interface RegulationsResponseRegulationsInfo
 */
export interface RegulationsResponseRegulationsInfo {
    /**
     * 規制市場 <table>   <thead>     <tr>       <th>定義値</th>       <th>内容</th>     </tr>   </thead>   <tbody>     <tr>       <td>0</td>       <td>全対象</td>     </tr>     <tr>       <td>1</td>       <td>東証</td>     </tr>     <tr>       <td>3</td>       <td>名証</td>     </tr>     <tr>       <td>5</td>       <td>福証</td>     </tr>     <tr>       <td>6</td>       <td>札証</td>     </tr>     <tr>       <td>9</td>       <td>SOR</td>     </tr>     <tr>       <td>10</td>       <td>CXJ</td>     </tr>     <tr>       <td>21</td>       <td>JNX</td>     </tr>   </tbody> </table>
     * @type {number}
     * @memberof RegulationsResponseRegulationsInfo
     */
    'Exchange'?: number;
    /**
     * 規制取引区分<br> ※空売り規制の場合、「4：新規」 <table>   <thead>     <tr>       <th>定義値</th>       <th>内容</th>     </tr>   </thead>   <tbody>     <tr>       <td>0</td>       <td>全対象</td>     </tr>     <tr>       <td>1</td>       <td>現物</td>     </tr>     <tr>       <td>2</td>       <td>信用新規（制度）</td>     </tr>     <tr>       <td>3</td>       <td>信用新規（一般）</td>     </tr>     <tr>       <td>4</td>       <td>新規</td>     </tr>     <tr>       <td>5</td>       <td>信用返済（制度）</td>     </tr>     <tr>       <td>6</td>       <td>信用返済（一般）</td>     </tr>     <tr>       <td>7</td>       <td>返済</td>     </tr>     <tr>       <td>8</td>       <td>品受</td>     </tr>     <tr>       <td>9</td>       <td>品渡</td>     </tr>   </tbody> </table>
     * @type {number}
     * @memberof RegulationsResponseRegulationsInfo
     */
    'Product'?: number;
    /**
     * 規制売買<br> ※空売り規制の場合、「1：売」 <table>   <thead>     <tr>       <th>定義値</th>       <th>内容</th>     </tr>   </thead>   <tbody>     <tr>       <td>0</td>       <td>全対象</td>     </tr>     <tr>       <td>1</td>       <td>売</td>     </tr>     <tr>       <td>2</td>       <td>買</td>     </tr>   </tbody> </table>
     * @type {string}
     * @memberof RegulationsResponseRegulationsInfo
     */
    'Side'?: string;
    /**
     * 理由<br>※空売り規制の場合、「空売り規制」
     * @type {string}
     * @memberof RegulationsResponseRegulationsInfo
     */
    'Reason'?: string;
    /**
     * 制限開始日<br>yyyy/MM/dd HH:mm形式  <br>※空売り規制の場合、null
     * @type {string}
     * @memberof RegulationsResponseRegulationsInfo
     */
    'LimitStartDay'?: string;
    /**
     * 制限終了日<br>yyyy/MM/dd HH:mm形式  <br>※空売り規制の場合、null
     * @type {string}
     * @memberof RegulationsResponseRegulationsInfo
     */
    'LimitEndDay'?: string;
    /**
     * コンプライアンスレベル<br> ※空売り規制の場合、null <table>   <thead>     <tr>       <th>定義値</th>       <th>内容</th>     </tr>   </thead>   <tbody>     <tr>       <td>０</td>       <td>規制無し</td>     </tr>     <tr>       <td>１</td>       <td>ワーニング</td>     </tr>     <tr>       <td>２</td>       <td>エラー</td>     </tr>   </tbody> </table>
     * @type {number}
     * @memberof RegulationsResponseRegulationsInfo
     */
    'Level'?: number;
}
/**
 * 
 * @export
 * @interface RequestCancelOrder
 */
export interface RequestCancelOrder {
    /**
     * 注文番号<br>sendorderのレスポンスで受け取るOrderID。
     * @type {string}
     * @memberof RequestCancelOrder
     */
    'OrderId': string;
    /**
     * 注文パスワード
     * @type {string}
     * @memberof RequestCancelOrder
     */
    'Password': string;
}
/**
 * 
 * @export
 * @interface RequestRegister
 */
export interface RequestRegister {
    /**
     * 
     * @type {Array<RequestRegisterSymbols>}
     * @memberof RequestRegister
     */
    'Symbols'?: Array<RequestRegisterSymbols>;
}
/**
 * 
 * @export
 * @interface RequestRegisterSymbols
 */
export interface RequestRegisterSymbols {
    /**
     * 銘柄コード
     * @type {string}
     * @memberof RequestRegisterSymbols
     */
    'Symbol'?: string;
    /**
     * 市場コード <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>東証</td>       </tr>       <tr>           <td>3</td>           <td>名証</td>       </tr>       <tr>           <td>5</td>           <td>福証</td>       </tr>       <tr>           <td>6</td>           <td>札証</td>       </tr>       <tr>           <td>2</td>           <td>日通し</td>       </tr>       <tr>           <td>23</td>           <td>日中</td>       </tr>       <tr>           <td>24</td>           <td>夜間</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestRegisterSymbols
     */
    'Exchange'?: number;
}
/**
 * 
 * @export
 * @interface RequestSendOrder
 */
export interface RequestSendOrder {
    /**
     * 注文パスワード
     * @type {string}
     * @memberof RequestSendOrder
     */
    'Password': string;
    /**
     * 銘柄コード
     * @type {string}
     * @memberof RequestSendOrder
     */
    'Symbol': string;
    /**
     * 市場コード <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>東証</td>       </tr>       <tr>           <td>3</td>           <td>名証</td>       </tr>       <tr>           <td>5</td>           <td>福証</td>       </tr>       <tr>           <td>6</td>           <td>札証</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrder
     */
    'Exchange': number;
    /**
     * 商品種別 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>株式</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrder
     */
    'SecurityType': number;
    /**
     * 売買区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>売</td>       </tr>       <tr>           <td>2</td>           <td>買</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof RequestSendOrder
     */
    'Side': string;
    /**
     * 信用区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>現物</td>       </tr>       <tr>           <td>2</td>           <td>新規</td>       </tr>       <tr>           <td>3</td>           <td>返済</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrder
     */
    'CashMargin': number;
    /**
     * 信用取引区分<br>※現物取引の場合は指定不要。<br>※信用取引の場合、必須。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>制度信用</td>       </tr>       <tr>           <td>2</td>           <td>一般信用（長期）</td>       </tr>       <tr>           <td>3</td>           <td>一般信用（デイトレ）</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrder
     */
    'MarginTradeType'?: number;
    /**
     * １株あたりのプレミアム料(円)<br>  ※プレミアム料の刻値は、プレミアム料取得APIのレスポンスにある\"TickMarginPremium\"にてご確認ください。<br> ※入札受付中(19:30～20:30)プレミアム料入札可能銘柄の場合、「MarginPremiumUnit」は必須となります。<br> ※入札受付中(19:30～20:30)のプレミアム料入札可能銘柄以外の場合は、「MarginPremiumUnit」の記載は無視されます。<br> ※入札受付中以外の時間帯では、「MarginPremiumUnit」の記載は無視されます。
     * @type {number}
     * @memberof RequestSendOrder
     */
    'MarginPremiumUnit'?: number;
    /**
     * 受渡区分<br>※現物買は指定必須。<br>※現物売は「0(指定なし)」を設定<br>※信用新規は「0(指定なし)」を設定<br>※信用返済は指定必須 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0</td>           <td>指定なし</td>       </tr>       <tr>           <td>1</td>           <td>自動振替</td>       </tr>       <tr>           <td>2</td>           <td>お預り金</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrder
     */
    'DelivType': number;
    /**
     * 資産区分（預り区分）<br>※現物買は、指定必須。<br>※現物売は、「\'  \'」 半角スペース2つを指定必須。<br>※信用新規と信用返済は、指定不要。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>(半角スペース2つ)</td>           <td>現物売の場合</td>       </tr>       <tr>           <td>02</td>           <td>保護</td>       </tr>       <tr>           <td>AA</td>           <td>信用代用</td>       </tr>       <tr>           <td>11</td>           <td>信用取引</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof RequestSendOrder
     */
    'FundType'?: string;
    /**
     * 口座種別 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>2</td>           <td>一般</td>       </tr>       <tr>           <td>4</td>           <td>特定</td>       </tr>       <tr>           <td>12</td>           <td>法人</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrder
     */
    'AccountType': number;
    /**
     * 注文数量<br>※信用一括返済の場合、返済したい合計数量を入力してください。
     * @type {number}
     * @memberof RequestSendOrder
     */
    'Qty': number;
    /**
     * 決済順序<br>※信用返済の場合、必須。<br>※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。<br>※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0</td>           <td>日付（古い順）、損益（高い順）</td>       </tr>       <tr>           <td>1</td>           <td>日付（古い順）、損益（低い順）</td>       </tr>       <tr>           <td>2</td>           <td>日付（新しい順）、損益（高い順）</td>       </tr>       <tr>           <td>3</td>           <td>日付（新しい順）、損益（低い順）</td>       </tr>       <tr>           <td>4</td>           <td>損益（高い順）、日付（古い順）</td>       </tr>       <tr>           <td>5</td>           <td>損益（高い順）、日付（新しい順）</td>       </tr>       <tr>           <td>6</td>           <td>損益（低い順）、日付（古い順）</td>       </tr>       <tr>           <td>7</td>           <td>損益（低い順）、日付（新しい順）</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrder
     */
    'ClosePositionOrder'?: number;
    /**
     * 返済建玉指定<br>※信用返済の場合、必須。<br>※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。<br>※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。<br>※信用一括返済の場合、各建玉IDと返済したい数量を入力してください。<br>※建玉IDは「E」から始まる番号です。
     * @type {Array<Positions>}
     * @memberof RequestSendOrder
     */
    'ClosePositions'?: Array<Positions>;
    /**
     * 執行条件 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>           <th>”Price\"の指定</th>       </tr>   </thead>   <tbody>       <tr>           <td>10</td>           <td>成行</td>           <td>0</td>       </tr>       <tr>           <td>13</td>           <td>寄成（前場）</td>           <td>0</td>       </tr>       <tr>           <td>14</td>           <td>寄成（後場）</td>           <td>0</td>       </tr>       <tr>           <td>15</td>           <td>引成（前場）</td>           <td>0</td>       </tr>       <tr>           <td>16</td>           <td>引成（後場）</td>           <td>0</td>       </tr>       <tr>           <td>17</td>           <td>IOC成行</td>           <td>0</td>       </tr>       <tr>           <td>20</td>           <td>指値</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>21</td>           <td>寄指（前場）</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>22</td>           <td>寄指（後場）</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>23</td>           <td>引指（前場）</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>24</td>           <td>引指（後場）</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>25</td>           <td>不成（前場）</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>26</td>           <td>不成（後場）</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>27</td>           <td>IOC指値</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>30</td>           <td>逆指値</td>           <td></td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrder
     */
    'FrontOrderType': number;
    /**
     * 注文価格<br>※FrontOrderTypeで成行を指定した場合、0を指定する。<br>※詳細について、”FrontOrderType”をご確認ください。
     * @type {number}
     * @memberof RequestSendOrder
     */
    'Price': number;
    /**
     * 注文有効期限<br> yyyyMMdd形式。<br> 「0」を指定すると、kabuステーション上の発注画面の「本日」に対応する日付として扱います。<br> 「本日」は直近の注文可能日となり、以下のように設定されます。<br> 引けまでの間 : 当日<br> 引け後       : 翌取引所営業日<br> 休前日       : 休日明けの取引所営業日<br> ※ 日替わりはkabuステーションが日付変更通知を受信したタイミングです。
     * @type {number}
     * @memberof RequestSendOrder
     */
    'ExpireDay': number;
    /**
     * 
     * @type {RequestSendOrderReverseLimitOrder}
     * @memberof RequestSendOrder
     */
    'ReverseLimitOrder'?: RequestSendOrderReverseLimitOrder;
}
/**
 * 
 * @export
 * @interface RequestSendOrderDerivFuture
 */
export interface RequestSendOrderDerivFuture {
    /**
     * 注文パスワード
     * @type {string}
     * @memberof RequestSendOrderDerivFuture
     */
    'Password': string;
    /**
     * 銘柄コード<br>※取引最終日に「先物銘柄コード取得」でDerivMonthに0（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
     * @type {string}
     * @memberof RequestSendOrderDerivFuture
     */
    'Symbol': string;
    /**
     * 市場コード <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>2</td>           <td>日通し</td>       </tr>       <tr>           <td>23</td>           <td>日中</td>       </tr>       <tr>           <td>24</td>           <td>夜間</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivFuture
     */
    'Exchange': number;
    /**
     * 取引区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>新規</td>       </tr>       <tr>           <td>2</td>           <td>返済</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivFuture
     */
    'TradeType': number;
    /**
     * 有効期間条件 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>FAS<br>※逆指値注文以外の場合、FASを指定した場合、FrontOrderTypeは指値(20)のみ指定可能。</td>       </tr>       <tr>           <td>2</td>           <td>FAK<br>※逆指値注文以外の場合、FAKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。</td>       </tr>       <tr>           <td>3</td>           <td>FOK<br>※逆指値注文以外の場合、FOKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivFuture
     */
    'TimeInForce': number;
    /**
     * 売買区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>売</td>       </tr>       <tr>           <td>2</td>           <td>買</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof RequestSendOrderDerivFuture
     */
    'Side': string;
    /**
     * 注文数量
     * @type {number}
     * @memberof RequestSendOrderDerivFuture
     */
    'Qty': number;
    /**
     * 決済順序<br>※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。<br>※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0</td>           <td>日付（古い順）、損益（高い順）</td>       </tr>       <tr>           <td>1</td>           <td>日付（古い順）、損益（低い順）</td>       </tr>       <tr>           <td>2</td>           <td>日付（新しい順）、損益（高い順）</td>       </tr>       <tr>           <td>3</td>           <td>日付（新しい順）、損益（低い順）</td>       </tr>       <tr>           <td>4</td>           <td>損益（高い順）、日付（古い順）</td>       </tr>       <tr>           <td>5</td>           <td>損益（高い順）、日付（新しい順）</td>       </tr>       <tr>           <td>6</td>           <td>損益（低い順）、日付（古い順）</td>       </tr>       <tr>           <td>7</td>           <td>損益（低い順）、日付（新しい順）</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivFuture
     */
    'ClosePositionOrder'?: number;
    /**
     * 返済建玉指定<br>※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。<br>※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。
     * @type {Array<PositionsDeriv>}
     * @memberof RequestSendOrderDerivFuture
     */
    'ClosePositions'?: Array<PositionsDeriv>;
    /**
     * 執行条件 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>           <th>”Price”の指定</th>       </tr>   </thead>   <tbody>       <tr>           <td>18</td>           <td>引成（派生）<br>※TimeInForceは、「FAK」のみ有効</td>           <td>0</td>       </tr>       <tr>           <td>20</td>           <td>指値</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>28</td>           <td>引指（派生）<br>※TimeInForceは、「FAS」のみ有効</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>30</td>           <td>逆指値</td>           <td></td>       </tr>       <tr>           <td>120</td>           <td>成行（マーケットオーダー）</td>           <td>0</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivFuture
     */
    'FrontOrderType': number;
    /**
     * 注文価格<br>※FrontOrderTypeで成行を指定した場合、0を指定する。<br>※詳細について、”FrontOrderType”をご確認ください。
     * @type {number}
     * @memberof RequestSendOrderDerivFuture
     */
    'Price': number;
    /**
     * 注文有効期限<br> yyyyMMdd形式。<br> 「0」を指定すると、kabuステーション上の発注画面の「本日」に対応する日付として扱います。<br> 「本日」は直近の注文可能日となり、以下のように設定されます。<br> その市場の引けまでの間 : 当日<br> その市場の引け後       : 翌取引所営業日<br> その市場の休前日       : 休日明けの取引所営業日<br> ※ 日替わりはkabuステーションが日付変更通知を受信したタイミングです。<br> ※ 日通しの場合、夜間取引の引け後に日付が更新されます。
     * @type {number}
     * @memberof RequestSendOrderDerivFuture
     */
    'ExpireDay': number;
    /**
     * 
     * @type {RequestSendOrderDerivFutureReverseLimitOrder}
     * @memberof RequestSendOrderDerivFuture
     */
    'ReverseLimitOrder'?: RequestSendOrderDerivFutureReverseLimitOrder;
}
/**
 * 逆指値条件<br> ※FrontOrderTypeで逆指値を指定した場合のみ必須。
 * @export
 * @interface RequestSendOrderDerivFutureReverseLimitOrder
 */
export interface RequestSendOrderDerivFutureReverseLimitOrder {
    /**
     * トリガ価格<br> ※未設定の場合はエラーになります。<br> ※数字以外が設定された場合はエラーになります。
     * @type {number}
     * @memberof RequestSendOrderDerivFutureReverseLimitOrder
     */
    'TriggerPrice': number;
    /**
     * 以上／以下<br> ※未設定の場合はエラーになります。<br> ※1、2以外が指定された場合はエラーになります。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>     <tr>       <td>1</td>       <td>以下</td>     </tr>     <tr>       <td>2</td>       <td>以上</td>     </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivFutureReverseLimitOrder
     */
    'UnderOver': number;
    /**
     * ヒット後執行条件<br> ※未設定の場合はエラーになります。<br> ※日通の注文で2以外が指定された場合はエラーになります。<br> ※日中、夜間の注文で1、2以外が指定された場合はエラーになります。<br> ※逆指値（成行）で有効期間条件(TimeInForce)にFAK以外を指定された場合はエラーになります。<br> ※逆指値（指値）で有効期間条件(TimeInForce)にFAS以外を指定された場合はエラーになります。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>     <tr>       <td>1</td>       <td>成行</td>     </tr>     <tr>       <td>2</td>       <td>指値</td>     </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivFutureReverseLimitOrder
     */
    'AfterHitOrderType': number;
    /**
     * ヒット後注文価格<br> ※未設定の場合はエラーになります。<br> ※数字以外が設定された場合はエラーになります。<br><br> ヒット後執行条件に従い、下記のようにヒット後注文価格を設定してください。  <table>   <thead>       <tr>           <th>ヒット後執行条件</th>           <th>設定価格</th>       </tr>   </thead>   <tbody>     <tr>       <td>成行</td>       <td>0</td>     </tr>     <tr>       <td>指値</td>       <td>指値の単価</td>     </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivFutureReverseLimitOrder
     */
    'AfterHitPrice': number;
}
/**
 * 
 * @export
 * @interface RequestSendOrderDerivOption
 */
export interface RequestSendOrderDerivOption {
    /**
     * 注文パスワード
     * @type {string}
     * @memberof RequestSendOrderDerivOption
     */
    'Password': string;
    /**
     * 銘柄コード<br>※取引最終日に「オプション銘柄コード取得」でDerivMonthに0（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
     * @type {string}
     * @memberof RequestSendOrderDerivOption
     */
    'Symbol': string;
    /**
     * 市場コード <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>2</td>           <td>日通し</td>       </tr>       <tr>           <td>23</td>           <td>日中</td>       </tr>       <tr>           <td>24</td>           <td>夜間</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivOption
     */
    'Exchange': number;
    /**
     * 取引区分 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>新規</td>       </tr>       <tr>           <td>2</td>           <td>返済</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivOption
     */
    'TradeType': number;
    /**
     * 有効期間条件 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>FAS<br>※逆指値注文以外の場合、FASを指定した場合、FrontOrderTypeは指値(20)のみ指定可能。</td>       </tr>       <tr>           <td>2</td>           <td>FAK<br>※逆指値注文以外の場合、FAKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。</td>       </tr>       <tr>           <td>3</td>           <td>FOK<br>※逆指値注文以外の場合、FOKを指定した場合、Exchangeは日中(23)、夜間(24)のみ指定可能。</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivOption
     */
    'TimeInForce': number;
    /**
     * 売買区分 <table>   <thead>     <tr>       <th>定義値</th>       <th>説明</th>     </tr>   </thead>   <tbody>     <tr>       <td>1</td>       <td>売</td>     </tr>     <tr>       <td>2</td>       <td>買</td>     </tr>   </tbody> </table>
     * @type {string}
     * @memberof RequestSendOrderDerivOption
     */
    'Side': string;
    /**
     * 注文数量
     * @type {number}
     * @memberof RequestSendOrderDerivOption
     */
    'Qty': number;
    /**
     * 決済順序<br>※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。<br>※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0</td>           <td>日付（古い順）、損益（高い順）</td>       </tr>       <tr>           <td>1</td>           <td>日付（古い順）、損益（低い順）</td>       </tr>       <tr>           <td>2</td>           <td>日付（新しい順）、損益（高い順）</td>       </tr>       <tr>           <td>3</td>           <td>日付（新しい順）、損益（低い順）</td>       </tr>       <tr>           <td>4</td>           <td>損益（高い順）、日付（古い順）</td>       </tr>       <tr>           <td>5</td>           <td>損益（高い順）、日付（新しい順）</td>       </tr>       <tr>           <td>6</td>           <td>損益（低い順）、日付（古い順）</td>       </tr>       <tr>           <td>7</td>           <td>損益（低い順）、日付（新しい順）</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivOption
     */
    'ClosePositionOrder'?: number;
    /**
     * 返済建玉指定<br>※ClosePositionOrderとClosePositionsはどちらか一方のみ指定可能。<br>※ClosePositionOrderとClosePositionsを両方指定した場合、エラー。
     * @type {Array<PositionsDeriv>}
     * @memberof RequestSendOrderDerivOption
     */
    'ClosePositions'?: Array<PositionsDeriv>;
    /**
     * 執行条件 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>           <th>”Price”の指定</th>       </tr>   </thead>   <tbody>       <tr>           <td>18</td>           <td>引成（派生）<br>※TimeInForceは、「FAK」のみ有効</td>           <td>0</td>       </tr>       <tr>           <td>20</td>           <td>指値</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>28</td>           <td>引指（派生）<br>※TimeInForceは、「FAS」のみ有効</td>           <td>発注したい金額</td>       </tr>       <tr>           <td>30</td>           <td>逆指値</td>           <td></td>       </tr>       <tr>           <td>120</td>           <td>成行（マーケットオーダー）</td>           <td>0</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderDerivOption
     */
    'FrontOrderType': number;
    /**
     * 注文価格<br>※FrontOrderTypeで成行を指定した場合、0を指定する。<br>※詳細について、”FrontOrderType”をご確認ください。
     * @type {number}
     * @memberof RequestSendOrderDerivOption
     */
    'Price': number;
    /**
     * 注文有効期限<br> yyyyMMdd形式。<br> 「0」を指定すると、kabuステーション上の発注画面の「本日」に対応する日付として扱います。<br> 「本日」は直近の注文可能日となり、以下のように設定されます。<br> その市場の引けまでの間 : 当日<br> その市場の引け後       : 翌取引所営業日<br> その市場の休前日       : 休日明けの取引所営業日<br> ※ 日替わりはkabuステーションが日付変更通知を受信したタイミングです。<br> ※ 日通しの場合、夜間取引の引け後に日付が更新されます。
     * @type {number}
     * @memberof RequestSendOrderDerivOption
     */
    'ExpireDay': number;
    /**
     * 
     * @type {RequestSendOrderDerivFutureReverseLimitOrder}
     * @memberof RequestSendOrderDerivOption
     */
    'ReverseLimitOrder'?: RequestSendOrderDerivFutureReverseLimitOrder;
}
/**
 * 逆指値条件<br> ※FrontOrderTypeで逆指値を指定した場合のみ必須。
 * @export
 * @interface RequestSendOrderReverseLimitOrder
 */
export interface RequestSendOrderReverseLimitOrder {
    /**
     * トリガ銘柄<br> ※未設定の場合はエラーになります。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>     <tr>       <td>1</td>       <td>発注銘柄</td>     </tr>     <tr>       <td>2</td>       <td>NK225指数</td>     </tr>     <tr>       <td>3</td>       <td>TOPIX指数</td>     </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderReverseLimitOrder
     */
    'TriggerSec': number;
    /**
     * トリガ価格<br> ※未設定の場合はエラーになります。<br> ※数字以外が設定された場合はエラーになります。
     * @type {number}
     * @memberof RequestSendOrderReverseLimitOrder
     */
    'TriggerPrice': number;
    /**
     * 以上／以下<br> ※未設定の場合はエラーになります。<br> ※1、2以外が指定された場合はエラーになります。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>     <tr>       <td>1</td>       <td>以下</td>     </tr>     <tr>       <td>2</td>       <td>以上</td>     </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderReverseLimitOrder
     */
    'UnderOver': number;
    /**
     * ヒット後執行条件<br> ※未設定の場合はエラーになります。<br> ※1、2、3以外が指定された場合はエラーになります。 <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>     <tr>       <td>1</td>       <td>成行</td>     </tr>     <tr>       <td>2</td>       <td>指値</td>     </tr>     <tr>       <td>3</td>       <td>不成</td>     </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderReverseLimitOrder
     */
    'AfterHitOrderType': number;
    /**
     * ヒット後注文価格<br> ※未設定の場合はエラーになります。<br> ※数字以外が設定された場合はエラーになります。<br><br> ヒット後執行条件に従い、下記のようにヒット後注文価格を設定してください。  <table>   <thead>       <tr>           <th>ヒット後執行条件</th>           <th>設定価格</th>       </tr>   </thead>   <tbody>     <tr>       <td>成行</td>       <td>0</td>     </tr>     <tr>       <td>指値</td>       <td>指値の単価</td>     </tr>     <tr>       <td>不成</td>       <td>不成の単価</td>     </tr>   </tbody> </table>
     * @type {number}
     * @memberof RequestSendOrderReverseLimitOrder
     */
    'AfterHitPrice': number;
}
/**
 * 
 * @export
 * @interface RequestToken
 */
export interface RequestToken {
    /**
     * APIパスワード
     * @type {string}
     * @memberof RequestToken
     */
    'APIPassword': string;
}
/**
 * 
 * @export
 * @interface RequestUnregister
 */
export interface RequestUnregister {
    /**
     * ※為替銘柄を登録する場合、銘柄名は\"通貨A\" + \"/\" + \"通貨B\"、市場コードは\"300\"で指定してください。 例：\'Symbol\': \'EUR/USD\', \"Exchange\": 300
     * @type {Array<RequestRegisterSymbols>}
     * @memberof RequestUnregister
     */
    'Symbols'?: Array<RequestRegisterSymbols>;
}
/**
 * 
 * @export
 * @interface SymbolNameSuccess
 */
export interface SymbolNameSuccess {
    /**
     * 銘柄コード
     * @type {string}
     * @memberof SymbolNameSuccess
     */
    'Symbol'?: string;
    /**
     * 銘柄名称
     * @type {string}
     * @memberof SymbolNameSuccess
     */
    'SymbolName'?: string;
}
/**
 * 
 * @export
 * @interface SymbolSuccess
 */
export interface SymbolSuccess {
    /**
     * 銘柄コード
     * @type {string}
     * @memberof SymbolSuccess
     */
    'Symbol'?: string;
    /**
     * 銘柄名
     * @type {string}
     * @memberof SymbolSuccess
     */
    'SymbolName'?: string;
    /**
     * 銘柄略称<br>※株式・先物・オプション銘柄の場合のみ
     * @type {string}
     * @memberof SymbolSuccess
     */
    'DisplayName'?: string;
    /**
     * 市場コード<br>※株式・先物・オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>東証</td>       </tr>       <tr>           <td>3</td>           <td>名証</td>       </tr>       <tr>           <td>5</td>           <td>福証</td>       </tr>       <tr>           <td>6</td>           <td>札証</td>       </tr>       <tr>           <td>2</td>           <td>日通し</td>       </tr>       <tr>           <td>23</td>           <td>日中</td>       </tr>       <tr>           <td>24</td>           <td>夜間</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof SymbolSuccess
     */
    'Exchange'?: number;
    /**
     * 市場名称<br>※株式・先物・オプション銘柄の場合のみ
     * @type {string}
     * @memberof SymbolSuccess
     */
    'ExchangeName'?: string;
    /**
     * 業種コード名<br>※株式銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>0050</td>           <td>水産・農林業</td>       </tr>       <tr>           <td>1050</td>           <td>鉱業</td>       </tr>       <tr>           <td>2050</td>           <td>建設業</td>       </tr>       <tr>           <td>3050</td>           <td>食料品</td>       </tr>       <tr>           <td>3100</td>           <td>繊維製品</td>       </tr>       <tr>           <td>3150</td>           <td>パルプ・紙</td>       </tr>       <tr>           <td>3200</td>           <td>化学</td>       </tr>       <tr>           <td>3250</td>           <td>医薬品</td>       </tr>       <tr>           <td>3300</td>           <td>石油・石炭製品</td>       </tr>       <tr>           <td>3350</td>           <td>ゴム製品</td>       </tr>       <tr>           <td>3400</td>           <td>ガラス・土石製品</td>       </tr>       <tr>           <td>3450</td>           <td>鉄鋼</td>       </tr>       <tr>           <td>3500</td>           <td>非鉄金属</td>       </tr>       <tr>           <td>3550</td>           <td>金属製品</td>       </tr>       <tr>           <td>3600</td>           <td>機械</td>       </tr>       <tr>           <td>3650</td>           <td>電気機器</td>       </tr>       <tr>           <td>3700</td>           <td>輸送用機器</td>       </tr>       <tr>           <td>3750</td>           <td>精密機器</td>       </tr>       <tr>           <td>3800</td>           <td>その他製品</td>       </tr>       <tr>           <td>4050</td>           <td>電気・ガス業</td>       </tr>       <tr>           <td>5050</td>           <td>陸運業</td>       </tr>       <tr>           <td>5100</td>           <td>海運業</td>       </tr>       <tr>           <td>5150</td>           <td>空運業</td>       </tr>       <tr>           <td>5200</td>           <td>倉庫・運輸関連業</td>       </tr>       <tr>           <td>5250</td>           <td>情報・通信業</td>       </tr>       <tr>           <td>6050</td>           <td>卸売業</td>       </tr>       <tr>           <td>6100</td>           <td>小売業</td>       </tr>       <tr>           <td>7050</td>           <td>銀行業</td>       </tr>       <tr>           <td>7100</td>           <td>証券、商品先物取引業</td>       </tr>       <tr>           <td>7150</td>           <td>保険業</td>       </tr>       <tr>           <td>7200</td>           <td>その他金融業</td>       </tr>       <tr>           <td>8050</td>           <td>不動産業</td>       </tr>       <tr>           <td>9050</td>           <td>サービス業</td>       </tr>       <tr>           <td>9999</td>           <td>その他</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof SymbolSuccess
     */
    'BisCategory'?: string;
    /**
     * 時価総額<br>※株式銘柄の場合のみ<br>追加情報出力フラグ：falseの場合、null
     * @type {number}
     * @memberof SymbolSuccess
     */
    'TotalMarketValue'?: number;
    /**
     * 発行済み株式数（千株）<br>※株式銘柄の場合のみ<br>追加情報出力フラグ：falseの場合、null
     * @type {number}
     * @memberof SymbolSuccess
     */
    'TotalStocks'?: number;
    /**
     * 売買単位<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof SymbolSuccess
     */
    'TradingUnit'?: number;
    /**
     * 決算期日<br>※株式銘柄の場合のみ<br>追加情報出力フラグ：falseの場合、null
     * @type {number}
     * @memberof SymbolSuccess
     */
    'FiscalYearEndBasic'?: number;
    /**
     * 呼値グループ<br> ※株式・先物・オプション銘柄の場合のみ<br> ※各呼値コードが対応する商品は以下となります。<BR> 　株式の呼値の単位の詳細は [JPXページ](https://www.jpx.co.jp/equities/trading/domestic/07.html) をご覧ください。<BR> 　10000：株式(TOPIX100採用銘柄以外)　<br> 　10003：株式(TOPIX100採用銘柄)<br> 　10118 : 日経平均先物<br> 　10119 : 日経225mini<br> 　10318 : 日経平均オプション<br> 　10706 : ﾐﾆTOPIX先物<br> 　10718 : TOPIX先物<br> 　12122 : JPX日経400指数先物<br> 　14473 : NYダウ先物<br> 　14515 : 日経平均VI先物<br> 　15411 : 東証マザーズ指数先物<br> 　15569 : 東証REIT指数先物<br> 　17163 : TOPIXCore30指数先物<br> <table>   <thead>       <tr>           <th>呼値コード</th>           <th>値段の水準</th>           <th>呼値単位</th>       </tr>   </thead>   <tbody>       <tr>           <td>10000</td>           <td>3000円以下</td>           <td>1</td>       </tr>       <tr>           <td>10000</td>           <td>5000円以下</td>           <td>5</td>       </tr>       <tr>           <td>10000</td>           <td>30000円以下</td>           <td>10</td>       </tr>       <tr>           <td>10000</td>           <td>50000円以下</td>           <td>50</td>       </tr>       <tr>           <td>10000</td>           <td>300000円以下</td>           <td>100</td>       </tr>       <tr>           <td>10000</td>           <td>500000円以下</td>           <td>500</td>       </tr>       <tr>           <td>10000</td>           <td>3000000円以下</td>           <td>1000</td>       </tr>       <tr>           <td>10000</td>           <td>5000000円以下</td>           <td>5000</td>       </tr>       <tr>           <td>10000</td>           <td>30000000円以下</td>           <td>10000</td>       </tr>       <tr>           <td>10000</td>           <td>50000000円以下</td>           <td>50000</td>       </tr>       <tr>           <td>10000</td>           <td>50000000円超</td>           <td>100000</td>       </tr>       <tr>           <td>10003</td>           <td>1000円以下</td>           <td>0.1</td>       </tr>       <tr>           <td>10003</td>           <td>3000円以下</td>           <td>0.5</td>       </tr>       <tr>           <td>10003</td>           <td>10000円以下</td>           <td>1</td>       </tr>       <tr>           <td>10003</td>           <td>30000円以下</td>           <td>5</td>       </tr>       <tr>           <td>10003</td>           <td>100000円以下</td>           <td>10</td>       </tr>       <tr>           <td>10003</td>           <td>300000円以下</td>           <td>50</td>       </tr>       <tr>           <td>10003</td>           <td>1000000円以下</td>           <td>100</td>       </tr>       <tr>           <td>10003</td>           <td>3000000円以下</td>           <td>500</td>       </tr>       <tr>           <td>10003</td>           <td>10000000円以下</td>           <td>1000</td>       </tr>       <tr>           <td>10003</td>           <td>30000000円以下</td>           <td>5000</td>       </tr>       <tr>           <td>10003</td>           <td>30000000円超</td>           <td>10000</td>       </tr>       <tr>           <td>10118</td>           <td>-</td>           <td>10</td>       </tr>       <tr>           <td>10119</td>           <td>-</td>           <td>5</td>       </tr>       <tr>           <td>10318</td>           <td>100円以下</td>           <td>1</td>       </tr>       <tr>           <td>10318</td>           <td>1000円以下</td>           <td>5</td>       </tr>       <tr>           <td>10318</td>           <td>1000円超</td>           <td>10</td>       </tr>       <tr>           <td>10706</td>           <td>-</td>           <td>0.25</td>       </tr>       <tr>           <td>10718</td>           <td>-</td>           <td>0.5</td>       </tr>       <tr>           <td>12122</td>           <td>-</td>           <td>5</td>       </tr>       <tr>           <td>14473</td>           <td>-</td>           <td>1</td>       </tr>       <tr>           <td>14515</td>           <td>-</td>           <td>0.05</td>       </tr>       <tr>           <td>15411</td>           <td>-</td>           <td>1</td>       </tr>       <tr>           <td>15569</td>           <td>-</td>           <td>0.5</td>       </tr>       <tr>           <td>17163</td>           <td>-</td>           <td>0.5</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof SymbolSuccess
     */
    'PriceRangeGroup'?: string;
    /**
     * 一般信用買建フラグ<br>※trueのとき一般信用買建可能<br>※株式銘柄の場合のみ
     * @type {boolean}
     * @memberof SymbolSuccess
     */
    'KCMarginBuy'?: boolean;
    /**
     * 一般信用売建フラグ<br>※trueのとき一般信用売建可能<br>※株式銘柄の場合のみ
     * @type {boolean}
     * @memberof SymbolSuccess
     */
    'KCMarginSell'?: boolean;
    /**
     * 制度信用買建フラグ<br>※trueのとき制度信用買建可能<br>※株式銘柄の場合のみ
     * @type {boolean}
     * @memberof SymbolSuccess
     */
    'MarginBuy'?: boolean;
    /**
     * 制度信用売建フラグ<br>※trueのとき制度信用売建可能<br>※株式銘柄の場合のみ
     * @type {boolean}
     * @memberof SymbolSuccess
     */
    'MarginSell'?: boolean;
    /**
     * 値幅上限<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof SymbolSuccess
     */
    'UpperLimit'?: number;
    /**
     * 値幅下限<br>※株式・先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof SymbolSuccess
     */
    'LowerLimit'?: number;
    /**
     * 原資産コード<br>※先物・オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>NK225</td>           <td>日経225</td>       </tr>       <tr>           <td>NK300</td>           <td>日経300</td>       </tr>       <tr>           <td>MOTHERS</td>           <td>東証マザーズ</td>       </tr>       <tr>           <td>JPX400</td>           <td>JPX日経400</td>       </tr>       <tr>           <td>TOPIX</td>           <td>TOPIX</td>       </tr>       <tr>           <td>NKVI</td>           <td>日経平均VI</td>       </tr>       <tr>           <td>DJIA</td>           <td>NYダウ</td>       </tr>       <tr>           <td>TSEREITINDEX</td>           <td>東証REIT指数</td>       </tr>       <tr>           <td>TOPIXCORE30</td>           <td>TOPIX Core30</td>       </tr>   </tbody> </table>
     * @type {string}
     * @memberof SymbolSuccess
     */
    'Underlyer'?: string;
    /**
     * 限月-年月<br>※「限月-年月」は「年(yyyy)/月(MM)」で表示します。<br>※先物・オプション銘柄の場合のみ
     * @type {string}
     * @memberof SymbolSuccess
     */
    'DerivMonth'?: string;
    /**
     * 取引開始日<br>※先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof SymbolSuccess
     */
    'TradeStart'?: number;
    /**
     * 取引終了日<br>※先物・オプション銘柄の場合のみ
     * @type {number}
     * @memberof SymbolSuccess
     */
    'TradeEnd'?: number;
    /**
     * 権利行使価格<br>※オプション銘柄の場合のみ
     * @type {number}
     * @memberof SymbolSuccess
     */
    'StrikePrice'?: number;
    /**
     * プット/コール区分<br>※オプション銘柄の場合のみ <table>   <thead>       <tr>           <th>定義値</th>           <th>説明</th>       </tr>   </thead>   <tbody>       <tr>           <td>1</td>           <td>プット</td>       </tr>       <tr>           <td>2</td>           <td>コール</td>       </tr>   </tbody> </table>
     * @type {number}
     * @memberof SymbolSuccess
     */
    'PutOrCall'?: number;
    /**
     * 清算値<br>※先物銘柄の場合のみ<br>追加情報出力フラグ：falseの場合、null
     * @type {number}
     * @memberof SymbolSuccess
     */
    'ClearingPrice'?: number;
}
/**
 * 
 * @export
 * @interface TokenSuccess
 */
export interface TokenSuccess {
    /**
     * 結果コード<br>0が成功。それ以外はエラーコード。
     * @type {number}
     * @memberof TokenSuccess
     */
    'ResultCode'?: number;
    /**
     * APIトークン
     * @type {string}
     * @memberof TokenSuccess
     */
    'Token'?: string;
}
/**
 * 
 * @export
 * @interface UnregisterAllSuccess
 */
export interface UnregisterAllSuccess {
    /**
     * 現在登録されている銘柄のリスト<br>※銘柄登録解除が正常に行われれば、空リストを返します。<br>　登録解除でエラー等が発生した場合、現在登録されている銘柄のリストを返します
     * @type {object}
     * @memberof UnregisterAllSuccess
     */
    'RegistList'?: object;
}
/**
 * 
 * @export
 * @interface WalletCashSuccess
 */
export interface WalletCashSuccess {
    /**
     * 現物買付可能額
     * @type {number}
     * @memberof WalletCashSuccess
     */
    'StockAccountWallet'?: number;
}
/**
 * 
 * @export
 * @interface WalletFutureSuccess
 */
export interface WalletFutureSuccess {
    /**
     * 新規建玉可能額
     * @type {number}
     * @memberof WalletFutureSuccess
     */
    'FutureTradeLimit'?: number;
    /**
     * 必要証拠金額<br>※銘柄指定の場合のみ。<br>※銘柄が指定されなかった場合、空を返す。
     * @type {number}
     * @memberof WalletFutureSuccess
     */
    'MarginRequirement'?: number;
}
/**
 * 
 * @export
 * @interface WalletMarginSuccess
 */
export interface WalletMarginSuccess {
    /**
     * 信用新規可能額
     * @type {number}
     * @memberof WalletMarginSuccess
     */
    'MarginAccountWallet'?: number;
    /**
     * 保証金維持率<br>※銘柄指定の場合のみ<br>※銘柄が指定されなかった場合、0.0を返す。
     * @type {number}
     * @memberof WalletMarginSuccess
     */
    'DepositkeepRate'?: number;
    /**
     * 委託保証金率<br>※銘柄指定の場合のみ。<br>※銘柄が指定されなかった場合、Noneを返す。
     * @type {number}
     * @memberof WalletMarginSuccess
     */
    'ConsignmentDepositRate'?: number;
    /**
     * 現金委託保証金率<br>※銘柄指定の場合のみ。<br>※銘柄が指定されなかった場合、Noneを返す。
     * @type {number}
     * @memberof WalletMarginSuccess
     */
    'CashOfConsignmentDepositRate'?: number;
}
/**
 * 
 * @export
 * @interface WalletOptionSuccess
 */
export interface WalletOptionSuccess {
    /**
     * 買新規建玉可能額
     * @type {number}
     * @memberof WalletOptionSuccess
     */
    'OptionBuyTradeLimit'?: number;
    /**
     * 売新規建玉可能額
     * @type {number}
     * @memberof WalletOptionSuccess
     */
    'OptionSellTradeLimit'?: number;
    /**
     * 必要証拠金額<br>※銘柄指定の場合のみ。<br>※銘柄が指定されなかった場合、空を返す。
     * @type {number}
     * @memberof WalletOptionSuccess
     */
    'MarginRequirement'?: number;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * APIトークンを発行します。<br> 発行したトークンは有効である限り使用することができ、リクエストごとに発行する必要はありません。<br> 発行されたAPIトークンは以下のタイミングで無効となります。<br> ・kabuステーションを終了した時<br> ・kabuステーションからログアウトした時<br> ・別のトークンが新たに発行された時<br> ※kabuステーションは早朝、強制的にログアウトいたしますのでご留意ください。<br>
         * @summary トークン発行
         * @param {RequestToken} requestToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenPost: async (requestToken: RequestToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestToken' is not null or undefined
            assertParamExists('tokenPost', 'requestToken', requestToken)
            const localVarPath = `/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * APIトークンを発行します。<br> 発行したトークンは有効である限り使用することができ、リクエストごとに発行する必要はありません。<br> 発行されたAPIトークンは以下のタイミングで無効となります。<br> ・kabuステーションを終了した時<br> ・kabuステーションからログアウトした時<br> ・別のトークンが新たに発行された時<br> ※kabuステーションは早朝、強制的にログアウトいたしますのでご留意ください。<br>
         * @summary トークン発行
         * @param {RequestToken} requestToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenPost(requestToken: RequestToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenPost(requestToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * APIトークンを発行します。<br> 発行したトークンは有効である限り使用することができ、リクエストごとに発行する必要はありません。<br> 発行されたAPIトークンは以下のタイミングで無効となります。<br> ・kabuステーションを終了した時<br> ・kabuステーションからログアウトした時<br> ・別のトークンが新たに発行された時<br> ※kabuステーションは早朝、強制的にログアウトいたしますのでご留意ください。<br>
         * @summary トークン発行
         * @param {RequestToken} requestToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenPost(requestToken: RequestToken, options?: any): AxiosPromise<TokenSuccess> {
            return localVarFp.tokenPost(requestToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * APIトークンを発行します。<br> 発行したトークンは有効である限り使用することができ、リクエストごとに発行する必要はありません。<br> 発行されたAPIトークンは以下のタイミングで無効となります。<br> ・kabuステーションを終了した時<br> ・kabuステーションからログアウトした時<br> ・別のトークンが新たに発行された時<br> ※kabuステーションは早朝、強制的にログアウトいたしますのでご留意ください。<br>
     * @summary トークン発行
     * @param {RequestToken} requestToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public tokenPost(requestToken: RequestToken, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).tokenPost(requestToken, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InfoApi - axios parameter creator
 * @export
 */
export const InfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * kabuステーションAPIのソフトリミット値を取得する
         * @summary ソフトリミット
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apisoftlimitGet: async (xAPIKEY: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('apisoftlimitGet', 'xAPIKEY', xAPIKEY)
            const localVarPath = `/apisoftlimit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した銘柄の時価情報・板情報を取得します<br> レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、 <br>再度時価情報・板情報APIを実行してください。
         * @summary 時価情報・板情報
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;東証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardGet: async (xAPIKEY: string, symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('boardGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('boardGet', 'symbol', symbol)
            const localVarPath = `/board/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * マネービューの情報を取得する
         * @summary 為替情報
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {'usdjpy' | 'eurjpy' | 'gbpjpy' | 'audjpy' | 'chfjpy' | 'cadjpy' | 'nzdjpy' | 'zarjpy' | 'eurusd' | 'gbpusd' | 'audusd'} symbol 通貨 &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;定義値&lt;/th&gt;       &lt;th&gt;内容&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;usdjpy&lt;/td&gt;       &lt;td&gt;USD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;eurjpy&lt;/td&gt;       &lt;td&gt;EUR/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;gbpjpy&lt;/td&gt;       &lt;td&gt;GBP/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;audjpy&lt;/td&gt;       &lt;td&gt;AUD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;chfjpy&lt;/td&gt;       &lt;td&gt;CHF/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;cadjpy&lt;/td&gt;       &lt;td&gt;CAD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;nzdjpy&lt;/td&gt;       &lt;td&gt;NZD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;zarjpy&lt;/td&gt;       &lt;td&gt;ZAR/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;eurusd&lt;/td&gt;       &lt;td&gt;EUR/USD&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;gbpusd&lt;/td&gt;       &lt;td&gt;GBP/USD&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;audusd&lt;/td&gt;       &lt;td&gt;AUD/USD&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeGet: async (xAPIKEY: string, symbol: 'usdjpy' | 'eurjpy' | 'gbpjpy' | 'audjpy' | 'chfjpy' | 'cadjpy' | 'nzdjpy' | 'zarjpy' | 'eurusd' | 'gbpusd' | 'audusd', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('exchangeGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('exchangeGet', 'symbol', symbol)
            const localVarPath = `/exchange/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した銘柄のプレミアム料を取得するAPI
         * @summary プレミアム料取得
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginpremiumGet: async (xAPIKEY: string, symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('marginpremiumGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('marginpremiumGet', 'symbol', symbol)
            const localVarPath = `/margin/marginpremium/{symbol}`
                .replace(`{${"Symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 注文一覧を取得します。<br> ※下記Queryパラメータは任意設定となります。
         * @summary 注文約定照会
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {'0' | '1' | '2' | '3' | '4'} [product] 取得する商品 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;0&lt;/td&gt;           &lt;td&gt;すべて &lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;現物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;信用&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;OP&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [id] 注文番号&lt;br&gt; ※指定された注文番号と一致する注文のみレスポンスします。&lt;br&gt; ※指定された注文番号との比較では大文字小文字を区別しません。&lt;br&gt; ※複数の注文番号を指定することはできません。
         * @param {string} [updtime] 更新日時&lt;br&gt; ※形式：yyyyMMddHHmmss （例：20201201123456）&lt;br&gt; ※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。&lt;br&gt; ※複数の更新日時を指定することはできません。
         * @param {string} [details] 注文詳細抑止 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;true&lt;/td&gt;           &lt;td&gt;注文詳細を出力する（デフォルト）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;false&lt;/td&gt;           &lt;td&gt;注文詳細の出力しない&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [symbol] 銘柄コード&lt;br&gt;※指定された銘柄コードと一致する注文のみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することができません。
         * @param {'1' | '2' | '3' | '4' | '5'} [state] 状態&lt;br&gt; ※指定された状態と一致する注文のみレスポンスします。&lt;br&gt; ※フィルタには数字の入力のみ受け付けます。&lt;br&gt; ※複数の状態を指定することはできません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;待機（発注待機）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;処理中（発注送信中）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;処理済（発注済・訂正済）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;訂正取消送信中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;終了（発注エラー・取消済・全約定・失効・期限切れ）&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {'1' | '2'} [side] 売買区分&lt;br&gt; ※指定された売買区分と一致する注文のみレスポンスします。&lt;br&gt; ※フィルタには数字の入力のみ受け付けます。&lt;br&gt; ※複数の売買区分を指定することができません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;売&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;買&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {'2' | '3'} [cashmargin] 取引区分&lt;br&gt; ※指定された取引区分と一致する注文のみレスポンスします。&lt;br&gt; ※フィルタには数字の入力のみ受け付けます。&lt;br&gt; ※複数の取引区分を指定することができません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;新規&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;返済&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersGet: async (xAPIKEY: string, product?: '0' | '1' | '2' | '3' | '4', id?: string, updtime?: string, details?: string, symbol?: string, state?: '1' | '2' | '3' | '4' | '5', side?: '1' | '2', cashmargin?: '2' | '3', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('ordersGet', 'xAPIKEY', xAPIKEY)
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (updtime !== undefined) {
                localVarQueryParameter['updtime'] = updtime;
            }

            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (cashmargin !== undefined) {
                localVarQueryParameter['cashmargin'] = cashmargin;
            }

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 残高一覧を取得します。<br>※下記Queryパラメータは任意設定となります。
         * @summary 残高照会
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {'0' | '1' | '2' | '3' | '4'} [product] 取得する商品 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;0&lt;/td&gt;           &lt;td&gt;すべて&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;現物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;信用&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;OP&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [symbol] 銘柄コード&lt;br&gt;※指定された銘柄コードと一致するポジションのみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することはできません。
         * @param {'1' | '2'} [side] 売買区分フィルタ&lt;br&gt; 指定された売買区分と一致する注文を返す &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;売&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;買&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [addinfo] 追加情報出力フラグ（未指定時：true）&lt;br&gt; ※追加情報は、「現在値」、「評価金額」、「評価損益額」、「評価損益率」を意味します。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;true&lt;/td&gt;           &lt;td&gt;追加情報を出力する&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;false&lt;/td&gt;           &lt;td&gt;追加情報を出力しない&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsGet: async (xAPIKEY: string, product?: '0' | '1' | '2' | '3' | '4', symbol?: string, side?: '1' | '2', addinfo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('positionsGet', 'xAPIKEY', xAPIKEY)
            const localVarPath = `/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (addinfo !== undefined) {
                localVarQueryParameter['addinfo'] = addinfo;
            }

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 株式の優先市場を取得する
         * @summary 優先市場
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryExchangeGet: async (xAPIKEY: string, symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('primaryExchangeGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('primaryExchangeGet', 'symbol', symbol)
            const localVarPath = `/primaryexchange/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 詳細ランキング画面と同様の各種ランキングを返します。 <br>ランキングの対象日はkabuステーションが保持している当日のデータとなります。 <br>※株価情報ランキング、業種別指数ランキングは、下記の時間帯でデータがクリアされるため、 <br>その間の詳細ランキングAPIは空レスポンスとなります。 <br>データクリア：平日7:53頃-9:00過ぎ頃 <br>※信用情報ランキングは毎週第３営業日の7:55頃にデータが更新されます。
         * @summary 詳細ランキング
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {'1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15'} type 種別&lt;br&gt; ※信用情報ランキングに「福証」「札証」を指定した場合は、空レスポンスになります &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;値上がり率（デフォルト）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;値下がり率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;売買高上位&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;売買代金&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;TICK回数&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;売買高急増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;7&lt;/td&gt;           &lt;td&gt;売買代金急増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;8&lt;/td&gt;           &lt;td&gt;信用売残増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;9&lt;/td&gt;           &lt;td&gt;信用売残減&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;10&lt;/td&gt;           &lt;td&gt;信用買残増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;11&lt;/td&gt;           &lt;td&gt;信用買残減&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;12&lt;/td&gt;           &lt;td&gt;信用高倍率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;13&lt;/td&gt;           &lt;td&gt;信用低倍率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;14&lt;/td&gt;           &lt;td&gt;業種別値上がり率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;15&lt;/td&gt;           &lt;td&gt;業種別値下がり率&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {'ALL' | 'T' | 'T1' | 'T2' | 'TM' | 'JQ' | 'M' | 'FK' | 'S'} exchangeDivision 市場&lt;br&gt; ※業種別値上がり率・値下がり率に市場を指定しても無視されます &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;ALL&lt;/td&gt;           &lt;td&gt;全市場（デフォルト）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;T&lt;/td&gt;           &lt;td&gt;東証全体&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;T1&lt;/td&gt;           &lt;td&gt;東証一部&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;T2&lt;/td&gt;           &lt;td&gt;東証二部&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;TM&lt;/td&gt;           &lt;td&gt;マザーズ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;JQ&lt;/td&gt;           &lt;td&gt;JASDAQ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;M&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;FK&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;S&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingGet: async (xAPIKEY: string, type: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15', exchangeDivision: 'ALL' | 'T' | 'T1' | 'T2' | 'TM' | 'JQ' | 'M' | 'FK' | 'S', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('rankingGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('rankingGet', 'type', type)
            // verify required parameter 'exchangeDivision' is not null or undefined
            assertParamExists('rankingGet', 'exchangeDivision', exchangeDivision)
            const localVarPath = `/ranking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['Type'] = type;
            }

            if (exchangeDivision !== undefined) {
                localVarQueryParameter['ExchangeDivision'] = exchangeDivision;
            }

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 規制情報＋空売り規制情報を取得する
         * @summary 規制情報
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;東証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regulationsGet: async (xAPIKEY: string, symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('regulationsGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('regulationsGet', 'symbol', symbol)
            const localVarPath = `/regulations/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した銘柄情報を取得します
         * @summary 銘柄情報
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;東証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [addinfo] 追加情報出力フラグ（未指定時：true）&lt;br&gt; ※追加情報は、「時価総額」、「発行済み株式数」、「決算期日」、「清算値」を意味します。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;true&lt;/td&gt;           &lt;td&gt;追加情報を出力する&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;false&lt;/td&gt;           &lt;td&gt;追加情報を出力しない&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolGet: async (xAPIKEY: string, symbol: string, addinfo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('symbolGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('symbolGet', 'symbol', symbol)
            const localVarPath = `/symbol/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (addinfo !== undefined) {
                localVarQueryParameter['addinfo'] = addinfo;
            }

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 先物銘柄コード取得
         * @summary 先物銘柄コード取得
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {number} derivMonth 限月&lt;br&gt; ※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt; ※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、 取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
         * @param {string} [futureCode] 先物コード&lt;br&gt; ※大文字小文字は区別しません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;NK225&lt;/td&gt;           &lt;td&gt;日経平均先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;NK225mini&lt;/td&gt;           &lt;td&gt;日経225mini先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;TOPIX&lt;/td&gt;           &lt;td&gt;TOPIX先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;TOPIXmini&lt;/td&gt;           &lt;td&gt;ミニTOPIX先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;MOTHERS&lt;/td&gt;           &lt;td&gt;東証マザーズ先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;JPX400&lt;/td&gt;           &lt;td&gt;JPX日経400先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;DOW&lt;/td&gt;           &lt;td&gt;NYダウ先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;VI&lt;/td&gt;           &lt;td&gt;日経平均VI先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;Core30&lt;/td&gt;           &lt;td&gt;TOPIX Core30先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;REIT&lt;/td&gt;           &lt;td&gt;東証REIT指数先物&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolnameFutureGet: async (xAPIKEY: string, derivMonth: number, futureCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('symbolnameFutureGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'derivMonth' is not null or undefined
            assertParamExists('symbolnameFutureGet', 'derivMonth', derivMonth)
            const localVarPath = `/symbolname/future`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (futureCode !== undefined) {
                localVarQueryParameter['FutureCode'] = futureCode;
            }

            if (derivMonth !== undefined) {
                localVarQueryParameter['DerivMonth'] = derivMonth;
            }

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * オプション銘柄コード取得
         * @summary オプション銘柄コード取得
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {number} derivMonth 限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
         * @param {string} putOrCall コール or プット&lt;br&gt; ※大文字小文字は区別しません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;P&lt;/td&gt;           &lt;td&gt;PUT&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;C&lt;/td&gt;           &lt;td&gt;CALL&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {number} strikePrice 権利行使価格&lt;br&gt;※0を指定した場合、APIを実行した時点でのATMとなります。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolnameOptionGet: async (xAPIKEY: string, derivMonth: number, putOrCall: string, strikePrice: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('symbolnameOptionGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'derivMonth' is not null or undefined
            assertParamExists('symbolnameOptionGet', 'derivMonth', derivMonth)
            // verify required parameter 'putOrCall' is not null or undefined
            assertParamExists('symbolnameOptionGet', 'putOrCall', putOrCall)
            // verify required parameter 'strikePrice' is not null or undefined
            assertParamExists('symbolnameOptionGet', 'strikePrice', strikePrice)
            const localVarPath = `/symbolname/option`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (derivMonth !== undefined) {
                localVarQueryParameter['DerivMonth'] = derivMonth;
            }

            if (putOrCall !== undefined) {
                localVarQueryParameter['PutOrCall'] = putOrCall;
            }

            if (strikePrice !== undefined) {
                localVarQueryParameter['StrikePrice'] = strikePrice;
            }

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InfoApi - functional programming interface
 * @export
 */
export const InfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InfoApiAxiosParamCreator(configuration)
    return {
        /**
         * kabuステーションAPIのソフトリミット値を取得する
         * @summary ソフトリミット
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apisoftlimitGet(xAPIKEY: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiSoftLimitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apisoftlimitGet(xAPIKEY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した銘柄の時価情報・板情報を取得します<br> レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、 <br>再度時価情報・板情報APIを実行してください。
         * @summary 時価情報・板情報
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;東証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boardGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BoardSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boardGet(xAPIKEY, symbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * マネービューの情報を取得する
         * @summary 為替情報
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {'usdjpy' | 'eurjpy' | 'gbpjpy' | 'audjpy' | 'chfjpy' | 'cadjpy' | 'nzdjpy' | 'zarjpy' | 'eurusd' | 'gbpusd' | 'audusd'} symbol 通貨 &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;定義値&lt;/th&gt;       &lt;th&gt;内容&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;usdjpy&lt;/td&gt;       &lt;td&gt;USD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;eurjpy&lt;/td&gt;       &lt;td&gt;EUR/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;gbpjpy&lt;/td&gt;       &lt;td&gt;GBP/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;audjpy&lt;/td&gt;       &lt;td&gt;AUD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;chfjpy&lt;/td&gt;       &lt;td&gt;CHF/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;cadjpy&lt;/td&gt;       &lt;td&gt;CAD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;nzdjpy&lt;/td&gt;       &lt;td&gt;NZD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;zarjpy&lt;/td&gt;       &lt;td&gt;ZAR/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;eurusd&lt;/td&gt;       &lt;td&gt;EUR/USD&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;gbpusd&lt;/td&gt;       &lt;td&gt;GBP/USD&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;audusd&lt;/td&gt;       &lt;td&gt;AUD/USD&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exchangeGet(xAPIKEY: string, symbol: 'usdjpy' | 'eurjpy' | 'gbpjpy' | 'audjpy' | 'chfjpy' | 'cadjpy' | 'nzdjpy' | 'zarjpy' | 'eurusd' | 'gbpusd' | 'audusd', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exchangeGet(xAPIKEY, symbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した銘柄のプレミアム料を取得するAPI
         * @summary プレミアム料取得
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marginpremiumGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarginPremiumResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marginpremiumGet(xAPIKEY, symbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 注文一覧を取得します。<br> ※下記Queryパラメータは任意設定となります。
         * @summary 注文約定照会
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {'0' | '1' | '2' | '3' | '4'} [product] 取得する商品 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;0&lt;/td&gt;           &lt;td&gt;すべて &lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;現物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;信用&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;OP&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [id] 注文番号&lt;br&gt; ※指定された注文番号と一致する注文のみレスポンスします。&lt;br&gt; ※指定された注文番号との比較では大文字小文字を区別しません。&lt;br&gt; ※複数の注文番号を指定することはできません。
         * @param {string} [updtime] 更新日時&lt;br&gt; ※形式：yyyyMMddHHmmss （例：20201201123456）&lt;br&gt; ※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。&lt;br&gt; ※複数の更新日時を指定することはできません。
         * @param {string} [details] 注文詳細抑止 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;true&lt;/td&gt;           &lt;td&gt;注文詳細を出力する（デフォルト）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;false&lt;/td&gt;           &lt;td&gt;注文詳細の出力しない&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [symbol] 銘柄コード&lt;br&gt;※指定された銘柄コードと一致する注文のみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することができません。
         * @param {'1' | '2' | '3' | '4' | '5'} [state] 状態&lt;br&gt; ※指定された状態と一致する注文のみレスポンスします。&lt;br&gt; ※フィルタには数字の入力のみ受け付けます。&lt;br&gt; ※複数の状態を指定することはできません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;待機（発注待機）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;処理中（発注送信中）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;処理済（発注済・訂正済）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;訂正取消送信中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;終了（発注エラー・取消済・全約定・失効・期限切れ）&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {'1' | '2'} [side] 売買区分&lt;br&gt; ※指定された売買区分と一致する注文のみレスポンスします。&lt;br&gt; ※フィルタには数字の入力のみ受け付けます。&lt;br&gt; ※複数の売買区分を指定することができません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;売&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;買&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {'2' | '3'} [cashmargin] 取引区分&lt;br&gt; ※指定された取引区分と一致する注文のみレスポンスします。&lt;br&gt; ※フィルタには数字の入力のみ受け付けます。&lt;br&gt; ※複数の取引区分を指定することができません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;新規&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;返済&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersGet(xAPIKEY: string, product?: '0' | '1' | '2' | '3' | '4', id?: string, updtime?: string, details?: string, symbol?: string, state?: '1' | '2' | '3' | '4' | '5', side?: '1' | '2', cashmargin?: '2' | '3', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrdersSuccess>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersGet(xAPIKEY, product, id, updtime, details, symbol, state, side, cashmargin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 残高一覧を取得します。<br>※下記Queryパラメータは任意設定となります。
         * @summary 残高照会
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {'0' | '1' | '2' | '3' | '4'} [product] 取得する商品 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;0&lt;/td&gt;           &lt;td&gt;すべて&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;現物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;信用&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;OP&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [symbol] 銘柄コード&lt;br&gt;※指定された銘柄コードと一致するポジションのみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することはできません。
         * @param {'1' | '2'} [side] 売買区分フィルタ&lt;br&gt; 指定された売買区分と一致する注文を返す &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;売&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;買&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [addinfo] 追加情報出力フラグ（未指定時：true）&lt;br&gt; ※追加情報は、「現在値」、「評価金額」、「評価損益額」、「評価損益率」を意味します。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;true&lt;/td&gt;           &lt;td&gt;追加情報を出力する&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;false&lt;/td&gt;           &lt;td&gt;追加情報を出力しない&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async positionsGet(xAPIKEY: string, product?: '0' | '1' | '2' | '3' | '4', symbol?: string, side?: '1' | '2', addinfo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PositionsSuccess>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.positionsGet(xAPIKEY, product, symbol, side, addinfo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 株式の優先市場を取得する
         * @summary 優先市場
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async primaryExchangeGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrimaryExchangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.primaryExchangeGet(xAPIKEY, symbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 詳細ランキング画面と同様の各種ランキングを返します。 <br>ランキングの対象日はkabuステーションが保持している当日のデータとなります。 <br>※株価情報ランキング、業種別指数ランキングは、下記の時間帯でデータがクリアされるため、 <br>その間の詳細ランキングAPIは空レスポンスとなります。 <br>データクリア：平日7:53頃-9:00過ぎ頃 <br>※信用情報ランキングは毎週第３営業日の7:55頃にデータが更新されます。
         * @summary 詳細ランキング
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {'1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15'} type 種別&lt;br&gt; ※信用情報ランキングに「福証」「札証」を指定した場合は、空レスポンスになります &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;値上がり率（デフォルト）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;値下がり率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;売買高上位&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;売買代金&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;TICK回数&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;売買高急増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;7&lt;/td&gt;           &lt;td&gt;売買代金急増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;8&lt;/td&gt;           &lt;td&gt;信用売残増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;9&lt;/td&gt;           &lt;td&gt;信用売残減&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;10&lt;/td&gt;           &lt;td&gt;信用買残増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;11&lt;/td&gt;           &lt;td&gt;信用買残減&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;12&lt;/td&gt;           &lt;td&gt;信用高倍率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;13&lt;/td&gt;           &lt;td&gt;信用低倍率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;14&lt;/td&gt;           &lt;td&gt;業種別値上がり率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;15&lt;/td&gt;           &lt;td&gt;業種別値下がり率&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {'ALL' | 'T' | 'T1' | 'T2' | 'TM' | 'JQ' | 'M' | 'FK' | 'S'} exchangeDivision 市場&lt;br&gt; ※業種別値上がり率・値下がり率に市場を指定しても無視されます &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;ALL&lt;/td&gt;           &lt;td&gt;全市場（デフォルト）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;T&lt;/td&gt;           &lt;td&gt;東証全体&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;T1&lt;/td&gt;           &lt;td&gt;東証一部&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;T2&lt;/td&gt;           &lt;td&gt;東証二部&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;TM&lt;/td&gt;           &lt;td&gt;マザーズ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;JQ&lt;/td&gt;           &lt;td&gt;JASDAQ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;M&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;FK&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;S&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rankingGet(xAPIKEY: string, type: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15', exchangeDivision: 'ALL' | 'T' | 'T1' | 'T2' | 'TM' | 'JQ' | 'M' | 'FK' | 'S', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RankingDefaultResponse | RankingByTickCountResponse | RankingByTradeVolumeResponse | RankingByTradeValueResponse | RankingByMarginResponse | RankingByCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rankingGet(xAPIKEY, type, exchangeDivision, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 規制情報＋空売り規制情報を取得する
         * @summary 規制情報
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;東証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regulationsGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegulationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regulationsGet(xAPIKEY, symbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した銘柄情報を取得します
         * @summary 銘柄情報
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;東証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [addinfo] 追加情報出力フラグ（未指定時：true）&lt;br&gt; ※追加情報は、「時価総額」、「発行済み株式数」、「決算期日」、「清算値」を意味します。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;true&lt;/td&gt;           &lt;td&gt;追加情報を出力する&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;false&lt;/td&gt;           &lt;td&gt;追加情報を出力しない&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async symbolGet(xAPIKEY: string, symbol: string, addinfo?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SymbolSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.symbolGet(xAPIKEY, symbol, addinfo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 先物銘柄コード取得
         * @summary 先物銘柄コード取得
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {number} derivMonth 限月&lt;br&gt; ※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt; ※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、 取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
         * @param {string} [futureCode] 先物コード&lt;br&gt; ※大文字小文字は区別しません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;NK225&lt;/td&gt;           &lt;td&gt;日経平均先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;NK225mini&lt;/td&gt;           &lt;td&gt;日経225mini先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;TOPIX&lt;/td&gt;           &lt;td&gt;TOPIX先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;TOPIXmini&lt;/td&gt;           &lt;td&gt;ミニTOPIX先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;MOTHERS&lt;/td&gt;           &lt;td&gt;東証マザーズ先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;JPX400&lt;/td&gt;           &lt;td&gt;JPX日経400先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;DOW&lt;/td&gt;           &lt;td&gt;NYダウ先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;VI&lt;/td&gt;           &lt;td&gt;日経平均VI先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;Core30&lt;/td&gt;           &lt;td&gt;TOPIX Core30先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;REIT&lt;/td&gt;           &lt;td&gt;東証REIT指数先物&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async symbolnameFutureGet(xAPIKEY: string, derivMonth: number, futureCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SymbolNameSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.symbolnameFutureGet(xAPIKEY, derivMonth, futureCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * オプション銘柄コード取得
         * @summary オプション銘柄コード取得
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {number} derivMonth 限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
         * @param {string} putOrCall コール or プット&lt;br&gt; ※大文字小文字は区別しません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;P&lt;/td&gt;           &lt;td&gt;PUT&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;C&lt;/td&gt;           &lt;td&gt;CALL&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {number} strikePrice 権利行使価格&lt;br&gt;※0を指定した場合、APIを実行した時点でのATMとなります。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async symbolnameOptionGet(xAPIKEY: string, derivMonth: number, putOrCall: string, strikePrice: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SymbolNameSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.symbolnameOptionGet(xAPIKEY, derivMonth, putOrCall, strikePrice, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InfoApi - factory interface
 * @export
 */
export const InfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InfoApiFp(configuration)
    return {
        /**
         * kabuステーションAPIのソフトリミット値を取得する
         * @summary ソフトリミット
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apisoftlimitGet(xAPIKEY: string, options?: any): AxiosPromise<ApiSoftLimitResponse> {
            return localVarFp.apisoftlimitGet(xAPIKEY, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した銘柄の時価情報・板情報を取得します<br> レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、 <br>再度時価情報・板情報APIを実行してください。
         * @summary 時価情報・板情報
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;東証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boardGet(xAPIKEY: string, symbol: string, options?: any): AxiosPromise<BoardSuccess> {
            return localVarFp.boardGet(xAPIKEY, symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * マネービューの情報を取得する
         * @summary 為替情報
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {'usdjpy' | 'eurjpy' | 'gbpjpy' | 'audjpy' | 'chfjpy' | 'cadjpy' | 'nzdjpy' | 'zarjpy' | 'eurusd' | 'gbpusd' | 'audusd'} symbol 通貨 &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;定義値&lt;/th&gt;       &lt;th&gt;内容&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;usdjpy&lt;/td&gt;       &lt;td&gt;USD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;eurjpy&lt;/td&gt;       &lt;td&gt;EUR/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;gbpjpy&lt;/td&gt;       &lt;td&gt;GBP/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;audjpy&lt;/td&gt;       &lt;td&gt;AUD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;chfjpy&lt;/td&gt;       &lt;td&gt;CHF/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;cadjpy&lt;/td&gt;       &lt;td&gt;CAD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;nzdjpy&lt;/td&gt;       &lt;td&gt;NZD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;zarjpy&lt;/td&gt;       &lt;td&gt;ZAR/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;eurusd&lt;/td&gt;       &lt;td&gt;EUR/USD&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;gbpusd&lt;/td&gt;       &lt;td&gt;GBP/USD&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;audusd&lt;/td&gt;       &lt;td&gt;AUD/USD&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeGet(xAPIKEY: string, symbol: 'usdjpy' | 'eurjpy' | 'gbpjpy' | 'audjpy' | 'chfjpy' | 'cadjpy' | 'nzdjpy' | 'zarjpy' | 'eurusd' | 'gbpusd' | 'audusd', options?: any): AxiosPromise<ExchangeResponse> {
            return localVarFp.exchangeGet(xAPIKEY, symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した銘柄のプレミアム料を取得するAPI
         * @summary プレミアム料取得
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marginpremiumGet(xAPIKEY: string, symbol: string, options?: any): AxiosPromise<MarginPremiumResponse> {
            return localVarFp.marginpremiumGet(xAPIKEY, symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * 注文一覧を取得します。<br> ※下記Queryパラメータは任意設定となります。
         * @summary 注文約定照会
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {'0' | '1' | '2' | '3' | '4'} [product] 取得する商品 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;0&lt;/td&gt;           &lt;td&gt;すべて &lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;現物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;信用&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;OP&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [id] 注文番号&lt;br&gt; ※指定された注文番号と一致する注文のみレスポンスします。&lt;br&gt; ※指定された注文番号との比較では大文字小文字を区別しません。&lt;br&gt; ※複数の注文番号を指定することはできません。
         * @param {string} [updtime] 更新日時&lt;br&gt; ※形式：yyyyMMddHHmmss （例：20201201123456）&lt;br&gt; ※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。&lt;br&gt; ※複数の更新日時を指定することはできません。
         * @param {string} [details] 注文詳細抑止 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;true&lt;/td&gt;           &lt;td&gt;注文詳細を出力する（デフォルト）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;false&lt;/td&gt;           &lt;td&gt;注文詳細の出力しない&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [symbol] 銘柄コード&lt;br&gt;※指定された銘柄コードと一致する注文のみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することができません。
         * @param {'1' | '2' | '3' | '4' | '5'} [state] 状態&lt;br&gt; ※指定された状態と一致する注文のみレスポンスします。&lt;br&gt; ※フィルタには数字の入力のみ受け付けます。&lt;br&gt; ※複数の状態を指定することはできません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;待機（発注待機）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;処理中（発注送信中）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;処理済（発注済・訂正済）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;訂正取消送信中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;終了（発注エラー・取消済・全約定・失効・期限切れ）&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {'1' | '2'} [side] 売買区分&lt;br&gt; ※指定された売買区分と一致する注文のみレスポンスします。&lt;br&gt; ※フィルタには数字の入力のみ受け付けます。&lt;br&gt; ※複数の売買区分を指定することができません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;売&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;買&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {'2' | '3'} [cashmargin] 取引区分&lt;br&gt; ※指定された取引区分と一致する注文のみレスポンスします。&lt;br&gt; ※フィルタには数字の入力のみ受け付けます。&lt;br&gt; ※複数の取引区分を指定することができません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;新規&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;返済&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersGet(xAPIKEY: string, product?: '0' | '1' | '2' | '3' | '4', id?: string, updtime?: string, details?: string, symbol?: string, state?: '1' | '2' | '3' | '4' | '5', side?: '1' | '2', cashmargin?: '2' | '3', options?: any): AxiosPromise<Array<OrdersSuccess>> {
            return localVarFp.ordersGet(xAPIKEY, product, id, updtime, details, symbol, state, side, cashmargin, options).then((request) => request(axios, basePath));
        },
        /**
         * 残高一覧を取得します。<br>※下記Queryパラメータは任意設定となります。
         * @summary 残高照会
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {'0' | '1' | '2' | '3' | '4'} [product] 取得する商品 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;0&lt;/td&gt;           &lt;td&gt;すべて&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;現物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;信用&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;OP&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [symbol] 銘柄コード&lt;br&gt;※指定された銘柄コードと一致するポジションのみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することはできません。
         * @param {'1' | '2'} [side] 売買区分フィルタ&lt;br&gt; 指定された売買区分と一致する注文を返す &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;売&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;買&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [addinfo] 追加情報出力フラグ（未指定時：true）&lt;br&gt; ※追加情報は、「現在値」、「評価金額」、「評価損益額」、「評価損益率」を意味します。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;true&lt;/td&gt;           &lt;td&gt;追加情報を出力する&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;false&lt;/td&gt;           &lt;td&gt;追加情報を出力しない&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        positionsGet(xAPIKEY: string, product?: '0' | '1' | '2' | '3' | '4', symbol?: string, side?: '1' | '2', addinfo?: string, options?: any): AxiosPromise<Array<PositionsSuccess>> {
            return localVarFp.positionsGet(xAPIKEY, product, symbol, side, addinfo, options).then((request) => request(axios, basePath));
        },
        /**
         * 株式の優先市場を取得する
         * @summary 優先市場
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        primaryExchangeGet(xAPIKEY: string, symbol: string, options?: any): AxiosPromise<PrimaryExchangeResponse> {
            return localVarFp.primaryExchangeGet(xAPIKEY, symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * 詳細ランキング画面と同様の各種ランキングを返します。 <br>ランキングの対象日はkabuステーションが保持している当日のデータとなります。 <br>※株価情報ランキング、業種別指数ランキングは、下記の時間帯でデータがクリアされるため、 <br>その間の詳細ランキングAPIは空レスポンスとなります。 <br>データクリア：平日7:53頃-9:00過ぎ頃 <br>※信用情報ランキングは毎週第３営業日の7:55頃にデータが更新されます。
         * @summary 詳細ランキング
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {'1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15'} type 種別&lt;br&gt; ※信用情報ランキングに「福証」「札証」を指定した場合は、空レスポンスになります &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;値上がり率（デフォルト）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;値下がり率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;売買高上位&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;売買代金&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;TICK回数&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;売買高急増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;7&lt;/td&gt;           &lt;td&gt;売買代金急増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;8&lt;/td&gt;           &lt;td&gt;信用売残増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;9&lt;/td&gt;           &lt;td&gt;信用売残減&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;10&lt;/td&gt;           &lt;td&gt;信用買残増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;11&lt;/td&gt;           &lt;td&gt;信用買残減&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;12&lt;/td&gt;           &lt;td&gt;信用高倍率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;13&lt;/td&gt;           &lt;td&gt;信用低倍率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;14&lt;/td&gt;           &lt;td&gt;業種別値上がり率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;15&lt;/td&gt;           &lt;td&gt;業種別値下がり率&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {'ALL' | 'T' | 'T1' | 'T2' | 'TM' | 'JQ' | 'M' | 'FK' | 'S'} exchangeDivision 市場&lt;br&gt; ※業種別値上がり率・値下がり率に市場を指定しても無視されます &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;ALL&lt;/td&gt;           &lt;td&gt;全市場（デフォルト）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;T&lt;/td&gt;           &lt;td&gt;東証全体&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;T1&lt;/td&gt;           &lt;td&gt;東証一部&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;T2&lt;/td&gt;           &lt;td&gt;東証二部&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;TM&lt;/td&gt;           &lt;td&gt;マザーズ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;JQ&lt;/td&gt;           &lt;td&gt;JASDAQ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;M&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;FK&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;S&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rankingGet(xAPIKEY: string, type: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15', exchangeDivision: 'ALL' | 'T' | 'T1' | 'T2' | 'TM' | 'JQ' | 'M' | 'FK' | 'S', options?: any): AxiosPromise<RankingDefaultResponse | RankingByTickCountResponse | RankingByTradeVolumeResponse | RankingByTradeValueResponse | RankingByMarginResponse | RankingByCategoryResponse> {
            return localVarFp.rankingGet(xAPIKEY, type, exchangeDivision, options).then((request) => request(axios, basePath));
        },
        /**
         * 規制情報＋空売り規制情報を取得する
         * @summary 規制情報
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;東証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regulationsGet(xAPIKEY: string, symbol: string, options?: any): AxiosPromise<RegulationsResponse> {
            return localVarFp.regulationsGet(xAPIKEY, symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した銘柄情報を取得します
         * @summary 銘柄情報
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;東証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {string} [addinfo] 追加情報出力フラグ（未指定時：true）&lt;br&gt; ※追加情報は、「時価総額」、「発行済み株式数」、「決算期日」、「清算値」を意味します。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;true&lt;/td&gt;           &lt;td&gt;追加情報を出力する&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;false&lt;/td&gt;           &lt;td&gt;追加情報を出力しない&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolGet(xAPIKEY: string, symbol: string, addinfo?: string, options?: any): AxiosPromise<SymbolSuccess> {
            return localVarFp.symbolGet(xAPIKEY, symbol, addinfo, options).then((request) => request(axios, basePath));
        },
        /**
         * 先物銘柄コード取得
         * @summary 先物銘柄コード取得
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {number} derivMonth 限月&lt;br&gt; ※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt; ※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、 取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
         * @param {string} [futureCode] 先物コード&lt;br&gt; ※大文字小文字は区別しません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;NK225&lt;/td&gt;           &lt;td&gt;日経平均先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;NK225mini&lt;/td&gt;           &lt;td&gt;日経225mini先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;TOPIX&lt;/td&gt;           &lt;td&gt;TOPIX先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;TOPIXmini&lt;/td&gt;           &lt;td&gt;ミニTOPIX先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;MOTHERS&lt;/td&gt;           &lt;td&gt;東証マザーズ先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;JPX400&lt;/td&gt;           &lt;td&gt;JPX日経400先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;DOW&lt;/td&gt;           &lt;td&gt;NYダウ先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;VI&lt;/td&gt;           &lt;td&gt;日経平均VI先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;Core30&lt;/td&gt;           &lt;td&gt;TOPIX Core30先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;REIT&lt;/td&gt;           &lt;td&gt;東証REIT指数先物&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolnameFutureGet(xAPIKEY: string, derivMonth: number, futureCode?: string, options?: any): AxiosPromise<SymbolNameSuccess> {
            return localVarFp.symbolnameFutureGet(xAPIKEY, derivMonth, futureCode, options).then((request) => request(axios, basePath));
        },
        /**
         * オプション銘柄コード取得
         * @summary オプション銘柄コード取得
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {number} derivMonth 限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
         * @param {string} putOrCall コール or プット&lt;br&gt; ※大文字小文字は区別しません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;P&lt;/td&gt;           &lt;td&gt;PUT&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;C&lt;/td&gt;           &lt;td&gt;CALL&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {number} strikePrice 権利行使価格&lt;br&gt;※0を指定した場合、APIを実行した時点でのATMとなります。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolnameOptionGet(xAPIKEY: string, derivMonth: number, putOrCall: string, strikePrice: number, options?: any): AxiosPromise<SymbolNameSuccess> {
            return localVarFp.symbolnameOptionGet(xAPIKEY, derivMonth, putOrCall, strikePrice, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InfoApi - object-oriented interface
 * @export
 * @class InfoApi
 * @extends {BaseAPI}
 */
export class InfoApi extends BaseAPI {
    /**
     * kabuステーションAPIのソフトリミット値を取得する
     * @summary ソフトリミット
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public apisoftlimitGet(xAPIKEY: string, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).apisoftlimitGet(xAPIKEY, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した銘柄の時価情報・板情報を取得します<br> レスポンスの一部にnullが発生した場合、該当銘柄を銘柄登録をしてから、 <br>再度時価情報・板情報APIを実行してください。
     * @summary 時価情報・板情報
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;東証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public boardGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).boardGet(xAPIKEY, symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * マネービューの情報を取得する
     * @summary 為替情報
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {'usdjpy' | 'eurjpy' | 'gbpjpy' | 'audjpy' | 'chfjpy' | 'cadjpy' | 'nzdjpy' | 'zarjpy' | 'eurusd' | 'gbpusd' | 'audusd'} symbol 通貨 &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;定義値&lt;/th&gt;       &lt;th&gt;内容&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;usdjpy&lt;/td&gt;       &lt;td&gt;USD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;eurjpy&lt;/td&gt;       &lt;td&gt;EUR/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;gbpjpy&lt;/td&gt;       &lt;td&gt;GBP/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;audjpy&lt;/td&gt;       &lt;td&gt;AUD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;chfjpy&lt;/td&gt;       &lt;td&gt;CHF/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;cadjpy&lt;/td&gt;       &lt;td&gt;CAD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;nzdjpy&lt;/td&gt;       &lt;td&gt;NZD/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;zarjpy&lt;/td&gt;       &lt;td&gt;ZAR/JPY&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;eurusd&lt;/td&gt;       &lt;td&gt;EUR/USD&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;gbpusd&lt;/td&gt;       &lt;td&gt;GBP/USD&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;audusd&lt;/td&gt;       &lt;td&gt;AUD/USD&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public exchangeGet(xAPIKEY: string, symbol: 'usdjpy' | 'eurjpy' | 'gbpjpy' | 'audjpy' | 'chfjpy' | 'cadjpy' | 'nzdjpy' | 'zarjpy' | 'eurusd' | 'gbpusd' | 'audusd', options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).exchangeGet(xAPIKEY, symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した銘柄のプレミアム料を取得するAPI
     * @summary プレミアム料取得
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {string} symbol 銘柄コード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public marginpremiumGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).marginpremiumGet(xAPIKEY, symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 注文一覧を取得します。<br> ※下記Queryパラメータは任意設定となります。
     * @summary 注文約定照会
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {'0' | '1' | '2' | '3' | '4'} [product] 取得する商品 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;0&lt;/td&gt;           &lt;td&gt;すべて &lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;現物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;信用&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;OP&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {string} [id] 注文番号&lt;br&gt; ※指定された注文番号と一致する注文のみレスポンスします。&lt;br&gt; ※指定された注文番号との比較では大文字小文字を区別しません。&lt;br&gt; ※複数の注文番号を指定することはできません。
     * @param {string} [updtime] 更新日時&lt;br&gt; ※形式：yyyyMMddHHmmss （例：20201201123456）&lt;br&gt; ※指定された更新日時以降（指定日時含む）に更新された注文のみレスポンスします。&lt;br&gt; ※複数の更新日時を指定することはできません。
     * @param {string} [details] 注文詳細抑止 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;true&lt;/td&gt;           &lt;td&gt;注文詳細を出力する（デフォルト）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;false&lt;/td&gt;           &lt;td&gt;注文詳細の出力しない&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {string} [symbol] 銘柄コード&lt;br&gt;※指定された銘柄コードと一致する注文のみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することができません。
     * @param {'1' | '2' | '3' | '4' | '5'} [state] 状態&lt;br&gt; ※指定された状態と一致する注文のみレスポンスします。&lt;br&gt; ※フィルタには数字の入力のみ受け付けます。&lt;br&gt; ※複数の状態を指定することはできません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;待機（発注待機）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;処理中（発注送信中）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;処理済（発注済・訂正済）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;訂正取消送信中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;終了（発注エラー・取消済・全約定・失効・期限切れ）&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {'1' | '2'} [side] 売買区分&lt;br&gt; ※指定された売買区分と一致する注文のみレスポンスします。&lt;br&gt; ※フィルタには数字の入力のみ受け付けます。&lt;br&gt; ※複数の売買区分を指定することができません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;売&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;買&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {'2' | '3'} [cashmargin] 取引区分&lt;br&gt; ※指定された取引区分と一致する注文のみレスポンスします。&lt;br&gt; ※フィルタには数字の入力のみ受け付けます。&lt;br&gt; ※複数の取引区分を指定することができません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;新規&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;返済&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public ordersGet(xAPIKEY: string, product?: '0' | '1' | '2' | '3' | '4', id?: string, updtime?: string, details?: string, symbol?: string, state?: '1' | '2' | '3' | '4' | '5', side?: '1' | '2', cashmargin?: '2' | '3', options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).ordersGet(xAPIKEY, product, id, updtime, details, symbol, state, side, cashmargin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 残高一覧を取得します。<br>※下記Queryパラメータは任意設定となります。
     * @summary 残高照会
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {'0' | '1' | '2' | '3' | '4'} [product] 取得する商品 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;0&lt;/td&gt;           &lt;td&gt;すべて&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;現物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;信用&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;OP&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {string} [symbol] 銘柄コード&lt;br&gt;※指定された銘柄コードと一致するポジションのみレスポンスします。&lt;br&gt;※複数の銘柄コードを指定することはできません。
     * @param {'1' | '2'} [side] 売買区分フィルタ&lt;br&gt; 指定された売買区分と一致する注文を返す &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;売&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;買&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {string} [addinfo] 追加情報出力フラグ（未指定時：true）&lt;br&gt; ※追加情報は、「現在値」、「評価金額」、「評価損益額」、「評価損益率」を意味します。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;true&lt;/td&gt;           &lt;td&gt;追加情報を出力する&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;false&lt;/td&gt;           &lt;td&gt;追加情報を出力しない&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public positionsGet(xAPIKEY: string, product?: '0' | '1' | '2' | '3' | '4', symbol?: string, side?: '1' | '2', addinfo?: string, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).positionsGet(xAPIKEY, product, symbol, side, addinfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 株式の優先市場を取得する
     * @summary 優先市場
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {string} symbol 銘柄コード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public primaryExchangeGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).primaryExchangeGet(xAPIKEY, symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 詳細ランキング画面と同様の各種ランキングを返します。 <br>ランキングの対象日はkabuステーションが保持している当日のデータとなります。 <br>※株価情報ランキング、業種別指数ランキングは、下記の時間帯でデータがクリアされるため、 <br>その間の詳細ランキングAPIは空レスポンスとなります。 <br>データクリア：平日7:53頃-9:00過ぎ頃 <br>※信用情報ランキングは毎週第３営業日の7:55頃にデータが更新されます。
     * @summary 詳細ランキング
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {'1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15'} type 種別&lt;br&gt; ※信用情報ランキングに「福証」「札証」を指定した場合は、空レスポンスになります &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;値上がり率（デフォルト）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;値下がり率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;売買高上位&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;4&lt;/td&gt;           &lt;td&gt;売買代金&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;TICK回数&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;売買高急増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;7&lt;/td&gt;           &lt;td&gt;売買代金急増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;8&lt;/td&gt;           &lt;td&gt;信用売残増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;9&lt;/td&gt;           &lt;td&gt;信用売残減&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;10&lt;/td&gt;           &lt;td&gt;信用買残増&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;11&lt;/td&gt;           &lt;td&gt;信用買残減&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;12&lt;/td&gt;           &lt;td&gt;信用高倍率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;13&lt;/td&gt;           &lt;td&gt;信用低倍率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;14&lt;/td&gt;           &lt;td&gt;業種別値上がり率&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;15&lt;/td&gt;           &lt;td&gt;業種別値下がり率&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {'ALL' | 'T' | 'T1' | 'T2' | 'TM' | 'JQ' | 'M' | 'FK' | 'S'} exchangeDivision 市場&lt;br&gt; ※業種別値上がり率・値下がり率に市場を指定しても無視されます &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;ALL&lt;/td&gt;           &lt;td&gt;全市場（デフォルト）&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;T&lt;/td&gt;           &lt;td&gt;東証全体&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;T1&lt;/td&gt;           &lt;td&gt;東証一部&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;T2&lt;/td&gt;           &lt;td&gt;東証二部&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;TM&lt;/td&gt;           &lt;td&gt;マザーズ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;JQ&lt;/td&gt;           &lt;td&gt;JASDAQ&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;M&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;FK&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;S&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public rankingGet(xAPIKEY: string, type: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15', exchangeDivision: 'ALL' | 'T' | 'T1' | 'T2' | 'TM' | 'JQ' | 'M' | 'FK' | 'S', options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).rankingGet(xAPIKEY, type, exchangeDivision, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 規制情報＋空売り規制情報を取得する
     * @summary 規制情報
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;東証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public regulationsGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).regulationsGet(xAPIKEY, symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した銘柄情報を取得します
     * @summary 銘柄情報
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;1&lt;/td&gt;           &lt;td&gt;東証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;3&lt;/td&gt;           &lt;td&gt;名証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {string} [addinfo] 追加情報出力フラグ（未指定時：true）&lt;br&gt; ※追加情報は、「時価総額」、「発行済み株式数」、「決算期日」、「清算値」を意味します。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;true&lt;/td&gt;           &lt;td&gt;追加情報を出力する&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;false&lt;/td&gt;           &lt;td&gt;追加情報を出力しない&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public symbolGet(xAPIKEY: string, symbol: string, addinfo?: string, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).symbolGet(xAPIKEY, symbol, addinfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 先物銘柄コード取得
     * @summary 先物銘柄コード取得
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {number} derivMonth 限月&lt;br&gt; ※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt; ※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、 取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
     * @param {string} [futureCode] 先物コード&lt;br&gt; ※大文字小文字は区別しません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;NK225&lt;/td&gt;           &lt;td&gt;日経平均先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;NK225mini&lt;/td&gt;           &lt;td&gt;日経225mini先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;TOPIX&lt;/td&gt;           &lt;td&gt;TOPIX先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;TOPIXmini&lt;/td&gt;           &lt;td&gt;ミニTOPIX先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;MOTHERS&lt;/td&gt;           &lt;td&gt;東証マザーズ先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;JPX400&lt;/td&gt;           &lt;td&gt;JPX日経400先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;DOW&lt;/td&gt;           &lt;td&gt;NYダウ先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;VI&lt;/td&gt;           &lt;td&gt;日経平均VI先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;Core30&lt;/td&gt;           &lt;td&gt;TOPIX Core30先物&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;REIT&lt;/td&gt;           &lt;td&gt;東証REIT指数先物&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public symbolnameFutureGet(xAPIKEY: string, derivMonth: number, futureCode?: string, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).symbolnameFutureGet(xAPIKEY, derivMonth, futureCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * オプション銘柄コード取得
     * @summary オプション銘柄コード取得
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {number} derivMonth 限月&lt;br&gt;※限月はyyyyMM形式で指定します。0を指定した場合、直近限月となります。&lt;br&gt;※取引最終日に「0」（直近限月）を指定した場合、日中・夜間の時間帯に関わらず、取引最終日を迎える限月の銘柄コードを返します。取引最終日を迎える銘柄の取引は日中取引をもって終了となりますので、ご注意ください。
     * @param {string} putOrCall コール or プット&lt;br&gt; ※大文字小文字は区別しません。 &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;P&lt;/td&gt;           &lt;td&gt;PUT&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;C&lt;/td&gt;           &lt;td&gt;CALL&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {number} strikePrice 権利行使価格&lt;br&gt;※0を指定した場合、APIを実行した時点でのATMとなります。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoApi
     */
    public symbolnameOptionGet(xAPIKEY: string, derivMonth: number, putOrCall: string, strikePrice: number, options?: AxiosRequestConfig) {
        return InfoApiFp(this.configuration).symbolnameOptionGet(xAPIKEY, derivMonth, putOrCall, strikePrice, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 注文を取消します
         * @summary 注文取消
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestCancelOrder} requestCancelOrder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelorderPut: async (xAPIKEY: string, requestCancelOrder: RequestCancelOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('cancelorderPut', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'requestCancelOrder' is not null or undefined
            assertParamExists('cancelorderPut', 'requestCancelOrder', requestCancelOrder)
            const localVarPath = `/cancelorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCancelOrder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 先物銘柄の注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
         * @summary 注文発注（先物）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestSendOrderDerivFuture} requestSendOrderDerivFuture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendoderFuturePost: async (xAPIKEY: string, requestSendOrderDerivFuture: RequestSendOrderDerivFuture, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('sendoderFuturePost', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'requestSendOrderDerivFuture' is not null or undefined
            assertParamExists('sendoderFuturePost', 'requestSendOrderDerivFuture', requestSendOrderDerivFuture)
            const localVarPath = `/sendorder/future`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestSendOrderDerivFuture, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * オプション銘柄の注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
         * @summary 注文発注（オプション）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestSendOrderDerivOption} requestSendOrderDerivOption 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendorderOptionPost: async (xAPIKEY: string, requestSendOrderDerivOption: RequestSendOrderDerivOption, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('sendorderOptionPost', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'requestSendOrderDerivOption' is not null or undefined
            assertParamExists('sendorderOptionPost', 'requestSendOrderDerivOption', requestSendOrderDerivOption)
            const localVarPath = `/sendorder/option`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestSendOrderDerivOption, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
         * @summary 注文発注（現物・信用）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestSendOrder} requestSendOrder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendorderPost: async (xAPIKEY: string, requestSendOrder: RequestSendOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('sendorderPost', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'requestSendOrder' is not null or undefined
            assertParamExists('sendorderPost', 'requestSendOrder', requestSendOrder)
            const localVarPath = `/sendorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestSendOrder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * 注文を取消します
         * @summary 注文取消
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestCancelOrder} requestCancelOrder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelorderPut(xAPIKEY: string, requestCancelOrder: RequestCancelOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelorderPut(xAPIKEY, requestCancelOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 先物銘柄の注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
         * @summary 注文発注（先物）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestSendOrderDerivFuture} requestSendOrderDerivFuture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendoderFuturePost(xAPIKEY: string, requestSendOrderDerivFuture: RequestSendOrderDerivFuture, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendoderFuturePost(xAPIKEY, requestSendOrderDerivFuture, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * オプション銘柄の注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
         * @summary 注文発注（オプション）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestSendOrderDerivOption} requestSendOrderDerivOption 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendorderOptionPost(xAPIKEY: string, requestSendOrderDerivOption: RequestSendOrderDerivOption, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendorderOptionPost(xAPIKEY, requestSendOrderDerivOption, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
         * @summary 注文発注（現物・信用）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestSendOrder} requestSendOrder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendorderPost(xAPIKEY: string, requestSendOrder: RequestSendOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendorderPost(xAPIKEY, requestSendOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * 注文を取消します
         * @summary 注文取消
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestCancelOrder} requestCancelOrder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelorderPut(xAPIKEY: string, requestCancelOrder: RequestCancelOrder, options?: any): AxiosPromise<OrderSuccess> {
            return localVarFp.cancelorderPut(xAPIKEY, requestCancelOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 先物銘柄の注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
         * @summary 注文発注（先物）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestSendOrderDerivFuture} requestSendOrderDerivFuture 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendoderFuturePost(xAPIKEY: string, requestSendOrderDerivFuture: RequestSendOrderDerivFuture, options?: any): AxiosPromise<OrderSuccess> {
            return localVarFp.sendoderFuturePost(xAPIKEY, requestSendOrderDerivFuture, options).then((request) => request(axios, basePath));
        },
        /**
         * オプション銘柄の注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
         * @summary 注文発注（オプション）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestSendOrderDerivOption} requestSendOrderDerivOption 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendorderOptionPost(xAPIKEY: string, requestSendOrderDerivOption: RequestSendOrderDerivOption, options?: any): AxiosPromise<OrderSuccess> {
            return localVarFp.sendorderOptionPost(xAPIKEY, requestSendOrderDerivOption, options).then((request) => request(axios, basePath));
        },
        /**
         * 注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
         * @summary 注文発注（現物・信用）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestSendOrder} requestSendOrder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendorderPost(xAPIKEY: string, requestSendOrder: RequestSendOrder, options?: any): AxiosPromise<OrderSuccess> {
            return localVarFp.sendorderPost(xAPIKEY, requestSendOrder, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 注文を取消します
     * @summary 注文取消
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {RequestCancelOrder} requestCancelOrder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public cancelorderPut(xAPIKEY: string, requestCancelOrder: RequestCancelOrder, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).cancelorderPut(xAPIKEY, requestCancelOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 先物銘柄の注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
     * @summary 注文発注（先物）
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {RequestSendOrderDerivFuture} requestSendOrderDerivFuture 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public sendoderFuturePost(xAPIKEY: string, requestSendOrderDerivFuture: RequestSendOrderDerivFuture, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).sendoderFuturePost(xAPIKEY, requestSendOrderDerivFuture, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * オプション銘柄の注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
     * @summary 注文発注（オプション）
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {RequestSendOrderDerivOption} requestSendOrderDerivOption 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public sendorderOptionPost(xAPIKEY: string, requestSendOrderDerivOption: RequestSendOrderDerivOption, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).sendorderOptionPost(xAPIKEY, requestSendOrderDerivOption, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 注文を発注します。<br> 同一の銘柄に対しての注文は同時に5件ほどを上限としてご利用ください。
     * @summary 注文発注（現物・信用）
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {RequestSendOrder} requestSendOrder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public sendorderPost(xAPIKEY: string, requestSendOrder: RequestSendOrder, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).sendorderPost(xAPIKEY, requestSendOrder, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegisterApi - axios parameter creator
 * @export
 */
export const RegisterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * PUSH配信する銘柄を登録します。<br> API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
         * @summary 銘柄登録
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestRegister} requestRegister 登録する銘柄のリスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPut: async (xAPIKEY: string, requestRegister: RequestRegister, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('registerPut', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'requestRegister' is not null or undefined
            assertParamExists('registerPut', 'requestRegister', requestRegister)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestRegister, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API登録銘柄リストに登録されている銘柄をすべて解除します
         * @summary 銘柄登録全解除
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterAllPut: async (xAPIKEY: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('unregisterAllPut', 'xAPIKEY', xAPIKEY)
            const localVarPath = `/unregister/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API登録銘柄リストに登録されている銘柄を解除します
         * @summary 銘柄登録解除
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestUnregister} requestUnregister 登録解除する銘柄のリスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterPut: async (xAPIKEY: string, requestUnregister: RequestUnregister, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('unregisterPut', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'requestUnregister' is not null or undefined
            assertParamExists('unregisterPut', 'requestUnregister', requestUnregister)
            const localVarPath = `/unregister`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestUnregister, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegisterApi - functional programming interface
 * @export
 */
export const RegisterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegisterApiAxiosParamCreator(configuration)
    return {
        /**
         * PUSH配信する銘柄を登録します。<br> API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
         * @summary 銘柄登録
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestRegister} requestRegister 登録する銘柄のリスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPut(xAPIKEY: string, requestRegister: RequestRegister, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPut(xAPIKEY, requestRegister, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API登録銘柄リストに登録されている銘柄をすべて解除します
         * @summary 銘柄登録全解除
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unregisterAllPut(xAPIKEY: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnregisterAllSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unregisterAllPut(xAPIKEY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API登録銘柄リストに登録されている銘柄を解除します
         * @summary 銘柄登録解除
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestUnregister} requestUnregister 登録解除する銘柄のリスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unregisterPut(xAPIKEY: string, requestUnregister: RequestUnregister, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unregisterPut(xAPIKEY, requestUnregister, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegisterApi - factory interface
 * @export
 */
export const RegisterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegisterApiFp(configuration)
    return {
        /**
         * PUSH配信する銘柄を登録します。<br> API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
         * @summary 銘柄登録
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestRegister} requestRegister 登録する銘柄のリスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPut(xAPIKEY: string, requestRegister: RequestRegister, options?: any): AxiosPromise<RegistSuccess> {
            return localVarFp.registerPut(xAPIKEY, requestRegister, options).then((request) => request(axios, basePath));
        },
        /**
         * API登録銘柄リストに登録されている銘柄をすべて解除します
         * @summary 銘柄登録全解除
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterAllPut(xAPIKEY: string, options?: any): AxiosPromise<UnregisterAllSuccess> {
            return localVarFp.unregisterAllPut(xAPIKEY, options).then((request) => request(axios, basePath));
        },
        /**
         * API登録銘柄リストに登録されている銘柄を解除します
         * @summary 銘柄登録解除
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {RequestUnregister} requestUnregister 登録解除する銘柄のリスト
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unregisterPut(xAPIKEY: string, requestUnregister: RequestUnregister, options?: any): AxiosPromise<RegistSuccess> {
            return localVarFp.unregisterPut(xAPIKEY, requestUnregister, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegisterApi - object-oriented interface
 * @export
 * @class RegisterApi
 * @extends {BaseAPI}
 */
export class RegisterApi extends BaseAPI {
    /**
     * PUSH配信する銘柄を登録します。<br> API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
     * @summary 銘柄登録
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {RequestRegister} requestRegister 登録する銘柄のリスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public registerPut(xAPIKEY: string, requestRegister: RequestRegister, options?: AxiosRequestConfig) {
        return RegisterApiFp(this.configuration).registerPut(xAPIKEY, requestRegister, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API登録銘柄リストに登録されている銘柄をすべて解除します
     * @summary 銘柄登録全解除
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public unregisterAllPut(xAPIKEY: string, options?: AxiosRequestConfig) {
        return RegisterApiFp(this.configuration).unregisterAllPut(xAPIKEY, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API登録銘柄リストに登録されている銘柄を解除します
     * @summary 銘柄登録解除
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {RequestUnregister} requestUnregister 登録解除する銘柄のリスト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public unregisterPut(xAPIKEY: string, requestUnregister: RequestUnregister, options?: AxiosRequestConfig) {
        return RegisterApiFp(this.configuration).unregisterPut(xAPIKEY, requestUnregister, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WalletApi - axios parameter creator
 * @export
 */
export const WalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 口座の取引余力（現物）を取得します
         * @summary 取引余力（現物）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCashGet: async (xAPIKEY: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('walletCashGet', 'xAPIKEY', xAPIKEY)
            const localVarPath = `/wallet/cash`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した銘柄の取引余力（現物）を取得します
         * @summary 取引余力（現物）（銘柄指定）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;定義値&lt;/th&gt;       &lt;th&gt;説明&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;1&lt;/td&gt;       &lt;td&gt;東証&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;3&lt;/td&gt;       &lt;td&gt;名証&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCashSymbolGet: async (xAPIKEY: string, symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('walletCashSymbolGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('walletCashSymbolGet', 'symbol', symbol)
            const localVarPath = `/wallet/cash/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 口座の取引余力（先物）を取得します
         * @summary 取引余力（先物）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletFutureGet: async (xAPIKEY: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('walletFutureGet', 'xAPIKEY', xAPIKEY)
            const localVarPath = `/wallet/future`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した銘柄の取引余力（先物）を取得します
         * @summary 取引余力（先物）（銘柄指定）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletFutureSymbolGet: async (xAPIKEY: string, symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('walletFutureSymbolGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('walletFutureSymbolGet', 'symbol', symbol)
            const localVarPath = `/wallet/future/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 口座の取引余力（信用）を取得します
         * @summary 取引余力（信用）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletMarginGet: async (xAPIKEY: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('walletMarginGet', 'xAPIKEY', xAPIKEY)
            const localVarPath = `/wallet/margin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した銘柄の取引余力（信用）を取得します
         * @summary 取引余力（信用）（銘柄指定）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;定義値&lt;/th&gt;       &lt;th&gt;説明&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;1&lt;/td&gt;       &lt;td&gt;東証&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;3&lt;/td&gt;       &lt;td&gt;名証&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletMarginSymbolGet: async (xAPIKEY: string, symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('walletMarginSymbolGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('walletMarginSymbolGet', 'symbol', symbol)
            const localVarPath = `/wallet/margin/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 口座の取引余力（オプション）を取得します
         * @summary 取引余力（オプション）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletOptionGet: async (xAPIKEY: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('walletOptionGet', 'xAPIKEY', xAPIKEY)
            const localVarPath = `/wallet/option`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した銘柄の取引余力（オプション）を取得します
         * @summary 取引余力（オプション）（銘柄指定）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletOptionSymbolGet: async (xAPIKEY: string, symbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xAPIKEY' is not null or undefined
            assertParamExists('walletOptionSymbolGet', 'xAPIKEY', xAPIKEY)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('walletOptionSymbolGet', 'symbol', symbol)
            const localVarPath = `/wallet/option/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAPIKEY !== undefined && xAPIKEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String(xAPIKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 * @export
 */
export const WalletApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletApiAxiosParamCreator(configuration)
    return {
        /**
         * 口座の取引余力（現物）を取得します
         * @summary 取引余力（現物）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCashGet(xAPIKEY: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletCashSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCashGet(xAPIKEY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した銘柄の取引余力（現物）を取得します
         * @summary 取引余力（現物）（銘柄指定）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;定義値&lt;/th&gt;       &lt;th&gt;説明&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;1&lt;/td&gt;       &lt;td&gt;東証&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;3&lt;/td&gt;       &lt;td&gt;名証&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletCashSymbolGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletCashSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletCashSymbolGet(xAPIKEY, symbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 口座の取引余力（先物）を取得します
         * @summary 取引余力（先物）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletFutureGet(xAPIKEY: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletFutureSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletFutureGet(xAPIKEY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した銘柄の取引余力（先物）を取得します
         * @summary 取引余力（先物）（銘柄指定）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletFutureSymbolGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletFutureSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletFutureSymbolGet(xAPIKEY, symbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 口座の取引余力（信用）を取得します
         * @summary 取引余力（信用）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletMarginGet(xAPIKEY: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletMarginSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletMarginGet(xAPIKEY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した銘柄の取引余力（信用）を取得します
         * @summary 取引余力（信用）（銘柄指定）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;定義値&lt;/th&gt;       &lt;th&gt;説明&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;1&lt;/td&gt;       &lt;td&gt;東証&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;3&lt;/td&gt;       &lt;td&gt;名証&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletMarginSymbolGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletMarginSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletMarginSymbolGet(xAPIKEY, symbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 口座の取引余力（オプション）を取得します
         * @summary 取引余力（オプション）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletOptionGet(xAPIKEY: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletOptionSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletOptionGet(xAPIKEY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した銘柄の取引余力（オプション）を取得します
         * @summary 取引余力（オプション）（銘柄指定）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletOptionSymbolGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletOptionSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletOptionSymbolGet(xAPIKEY, symbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WalletApi - factory interface
 * @export
 */
export const WalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletApiFp(configuration)
    return {
        /**
         * 口座の取引余力（現物）を取得します
         * @summary 取引余力（現物）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCashGet(xAPIKEY: string, options?: any): AxiosPromise<WalletCashSuccess> {
            return localVarFp.walletCashGet(xAPIKEY, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した銘柄の取引余力（現物）を取得します
         * @summary 取引余力（現物）（銘柄指定）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;定義値&lt;/th&gt;       &lt;th&gt;説明&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;1&lt;/td&gt;       &lt;td&gt;東証&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;3&lt;/td&gt;       &lt;td&gt;名証&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletCashSymbolGet(xAPIKEY: string, symbol: string, options?: any): AxiosPromise<WalletCashSuccess> {
            return localVarFp.walletCashSymbolGet(xAPIKEY, symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * 口座の取引余力（先物）を取得します
         * @summary 取引余力（先物）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletFutureGet(xAPIKEY: string, options?: any): AxiosPromise<WalletFutureSuccess> {
            return localVarFp.walletFutureGet(xAPIKEY, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した銘柄の取引余力（先物）を取得します
         * @summary 取引余力（先物）（銘柄指定）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletFutureSymbolGet(xAPIKEY: string, symbol: string, options?: any): AxiosPromise<WalletFutureSuccess> {
            return localVarFp.walletFutureSymbolGet(xAPIKEY, symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * 口座の取引余力（信用）を取得します
         * @summary 取引余力（信用）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletMarginGet(xAPIKEY: string, options?: any): AxiosPromise<WalletMarginSuccess> {
            return localVarFp.walletMarginGet(xAPIKEY, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した銘柄の取引余力（信用）を取得します
         * @summary 取引余力（信用）（銘柄指定）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;定義値&lt;/th&gt;       &lt;th&gt;説明&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;1&lt;/td&gt;       &lt;td&gt;東証&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;3&lt;/td&gt;       &lt;td&gt;名証&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletMarginSymbolGet(xAPIKEY: string, symbol: string, options?: any): AxiosPromise<WalletMarginSuccess> {
            return localVarFp.walletMarginSymbolGet(xAPIKEY, symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * 口座の取引余力（オプション）を取得します
         * @summary 取引余力（オプション）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletOptionGet(xAPIKEY: string, options?: any): AxiosPromise<WalletOptionSuccess> {
            return localVarFp.walletOptionGet(xAPIKEY, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した銘柄の取引余力（オプション）を取得します
         * @summary 取引余力（オプション）（銘柄指定）
         * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
         * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletOptionSymbolGet(xAPIKEY: string, symbol: string, options?: any): AxiosPromise<WalletOptionSuccess> {
            return localVarFp.walletOptionSymbolGet(xAPIKEY, symbol, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export class WalletApi extends BaseAPI {
    /**
     * 口座の取引余力（現物）を取得します
     * @summary 取引余力（現物）
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletCashGet(xAPIKEY: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletCashGet(xAPIKEY, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した銘柄の取引余力（現物）を取得します
     * @summary 取引余力（現物）（銘柄指定）
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;定義値&lt;/th&gt;       &lt;th&gt;説明&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;1&lt;/td&gt;       &lt;td&gt;東証&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;3&lt;/td&gt;       &lt;td&gt;名証&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;           &lt;td&gt;5&lt;/td&gt;           &lt;td&gt;福証&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;6&lt;/td&gt;           &lt;td&gt;札証&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletCashSymbolGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletCashSymbolGet(xAPIKEY, symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 口座の取引余力（先物）を取得します
     * @summary 取引余力（先物）
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletFutureGet(xAPIKEY: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletFutureGet(xAPIKEY, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した銘柄の取引余力（先物）を取得します
     * @summary 取引余力（先物）（銘柄指定）
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletFutureSymbolGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletFutureSymbolGet(xAPIKEY, symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 口座の取引余力（信用）を取得します
     * @summary 取引余力（信用）
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletMarginGet(xAPIKEY: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletMarginGet(xAPIKEY, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した銘柄の取引余力（信用）を取得します
     * @summary 取引余力（信用）（銘柄指定）
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;定義値&lt;/th&gt;       &lt;th&gt;説明&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;1&lt;/td&gt;       &lt;td&gt;東証&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;3&lt;/td&gt;       &lt;td&gt;名証&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletMarginSymbolGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletMarginSymbolGet(xAPIKEY, symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 口座の取引余力（オプション）を取得します
     * @summary 取引余力（オプション）
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletOptionGet(xAPIKEY: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletOptionGet(xAPIKEY, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した銘柄の取引余力（オプション）を取得します
     * @summary 取引余力（オプション）（銘柄指定）
     * @param {string} xAPIKEY トークン発行メソッドで取得した文字列
     * @param {string} symbol 銘柄コード &lt;br&gt; ※次の形式で入力してください。&lt;br&gt; [銘柄コード]@[市場コード]&lt;br&gt; ※市場コードは下記の定義値から選択してください。 &lt;b&gt;市場コード&lt;/b&gt; &lt;table&gt;   &lt;thead&gt;       &lt;tr&gt;           &lt;th&gt;定義値&lt;/th&gt;           &lt;th&gt;説明&lt;/th&gt;       &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;       &lt;tr&gt;           &lt;td&gt;2&lt;/td&gt;           &lt;td&gt;日通し&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;23&lt;/td&gt;           &lt;td&gt;日中&lt;/td&gt;       &lt;/tr&gt;       &lt;tr&gt;           &lt;td&gt;24&lt;/td&gt;           &lt;td&gt;夜間&lt;/td&gt;       &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public walletOptionSymbolGet(xAPIKEY: string, symbol: string, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletOptionSymbolGet(xAPIKEY, symbol, options).then((request) => request(this.axios, this.basePath));
    }
}


